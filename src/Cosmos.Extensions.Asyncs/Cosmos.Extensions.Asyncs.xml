<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Asyncs</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Asynchronous.ActionRunner">
            <summary>
            Action runner
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.#ctor(System.Action,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Asynchronous.ActionRunner"/>
            </summary>
            <param name="action"></param>
            <param name="scheduler"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Create(System.Action,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Create
            </summary>
            <param name="action"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Create``1(System.Func{``0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Create
            </summary>
            <param name="action"></param>
            <param name="scheduler"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Asynchronous.ActionRunner._scheduler">
            <summary>
            Task scheduler
            </summary>
        </member>
        <member name="F:Cosmos.Asynchronous.ActionRunner._count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.Count">
            <summary>
            Gets counrt
            </summary>
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.LastStart">
            <summary>
            The time last start
            </summary>
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.HasBeenRun">
            <summary>
            Has been run
            </summary>
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.LastComplete">
            <summary>
            The time last complete
            </summary>
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.HasCompleted">
            <summary>
            Has completed
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Cancel(System.Boolean)">
            <summary>
            Cancel
            </summary>
            <param name="onlyIfNotRunning"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Asynchronous.ActionRunner.IsScheduled">
            <summary>
            Is scheduled
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.RunSynchronously">
            <summary>
            Indiscriminately invokes the action.
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Run">
            <summary>
            Run
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Defer(System.TimeSpan,System.Boolean)">
            <summary>
            Defer
            </summary>
            <param name="delay"></param>
            <param name="clearSchedule"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.ActionRunner.Defer(System.Int32,System.Boolean)">
            <summary>
            Defer
            </summary>
            <param name="millisecondsDelay"></param>
            <param name="clearSchedule"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.AsyncReturns">
            <summary>
            Async returns
            </summary>
            <summary>
            Async returns
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Canceled``1(System.Threading.CancellationToken)">
            <summary>
            Returns canceled
            </summary>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Canceled``1(System.OperationCanceledException)">
            <summary>
            Returns canceled
            </summary>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.CompletedTask">
            <summary>
            Returns Completed Task
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Delegate(System.Action)">
            <summary>
            Returns Delegate
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Delegate``1(System.Func{``0})">
            <summary>
            Returns Delegate
            </summary>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Delegate``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns Delegate
            </summary>
            <param name="taskFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Exception``1(System.Exception)">
            <summary>
            Returns exception
            </summary>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Exception``1(System.Func{System.Exception})">
            <summary>
            Returns exception
            </summary>
            <param name="exceptionFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Default``1">
            <summary>
            Returns default
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Value``1(``0)">
            <summary>
            Returns value
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.Value``1(System.Func{``0})">
            <summary>
            Returns value
            </summary>
            <param name="valueFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOr``1(``0,``0)">
            <summary>
            Return value or
            </summary>
            <param name="value"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOr``1(``0,System.Func{``0})">
            <summary>
            Return value or
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOr``1(System.Func{``0},``0)">
            <summary>
            Return value or
            </summary>
            <param name="valueFunc"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOr``1(System.Func{``0},System.Func{``0})">
            <summary>
            Return value or
            </summary>
            <param name="valueFunc"></param>
            <param name="defaultValFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOrDefault``1(``0)">
            <summary>
            Return value or default
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOrDefault``1(System.Func{``0})">
            <summary>
            Return value or default
            </summary>
            <param name="valueFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOrException``1(``0,System.Exception)">
            <summary>
            Value or default
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOrException``1(``0,System.Func{System.Exception})">
            <summary>
            Value or default
            </summary>
            <param name="value"></param>
            <param name="exceptionFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ValueOrException``1(System.Func{``0},System.Func{System.Exception})">
            <summary>
            Value or default
            </summary>
            <param name="valueFunc"></param>
            <param name="exceptionFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.AsyncReturns.ForValueTask">
            <summary>
            Returns for value task
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ForValueTask.Exception``1(System.Exception)">
            <summary>
            Returns exception
            </summary>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ForValueTask.Default``1">
            <summary>
            Returns default
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.AsyncReturns.ForValueTask.Value``1(``0)">
            <summary>
            Returns value task
            </summary>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.SyncRunner">
            <summary>
            Sync runner
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCalling(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            For asynchronous calling
            </summary>
            <param name="task"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCalling(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            For asynchronous calling
            </summary>
            <param name="taskFunc"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCallingSafety(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            For asynchronous calling safety
            </summary>
            <param name="task"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCallingSafety(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            For asynchronous calling safety
            </summary>
            <param name="taskFunc"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCallingSafetyAndForget(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            For asynchronous calling safety and forget
            </summary>
            <param name="task"></param>
            <param name="exceptionAction"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.ForAsynchronousCallingSafetyAndForget(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            For asynchronous calling safety and forget
            </summary>
            <param name="taskFunc"></param>
            <param name="exceptionAction"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCalling``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCalling``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling
            </summary>
            <param name="taskFunc"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="taskFunc"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Threading.Tasks.Task{``0},``0,System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Func{System.Threading.Tasks.Task{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="taskFunc"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Threading.Tasks.Task{``0},System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="defaultValueFunc"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.SyncRunner.FromAsynchronousCallingSafety``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            From asynchronous calling safety
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="taskFunc"></param>
            <param name="defaultValueFunc"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.CancellableTask">
            <summary>
            Cancelable Task
            </summary>
        </member>
        <member name="F:Cosmos.Asynchronous.CancellableTask.TokenSource">
            <summary>
            Token source
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Cancel(System.Boolean)">
            <summary>
            Cancel
            </summary>
            <param name="onlyIfNotRunning"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Blank">
            <summary>
            Blank
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.#ctor(System.Action,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.#ctor(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.#ctor(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Init(System.Action)">
            <summary>
            Only allow for static initialization because this owns the TokenSource.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Start(System.TimeSpan,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Start
            </summary>
            <param name="delay"></param>
            <param name="scheduler"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.Start(System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Start
            </summary>
            <param name="millisecondsDelay"></param>
            <param name="scheduler"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.StartNew(System.TimeSpan,System.Action,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Start new
            </summary>
            <param name="delay"></param>
            <param name="action"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.StartNew(System.Int32,System.Action)">
            <summary>
            Start new
            </summary>
            <param name="millisecondsDelay"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.StartNew(System.Action,System.Nullable{System.TimeSpan},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Start new
            </summary>
            <param name="action"></param>
            <param name="delay"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.CancellableTask.StartNew(System.Action{System.Threading.CancellationToken},System.Nullable{System.TimeSpan},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Start new
            </summary>
            <param name="action"></param>
            <param name="delay"></param>
            <param name="scheduler"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.Tasks">
            <summary>
            Task utilities
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.Tasks.CompletedTask">
            <summary>
            Gets a task that has been completed successfully.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.Tasks.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>
            From canceled
            </summary>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.Tasks.FromCanceled``1(System.OperationCanceledException)">
            <summary>
            From canceled
            </summary>
            <param name="exception"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.Tasks.FromException``1(System.Exception)">
            <summary>
            From exception
            </summary>
            <param name="exception"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.TasksExtensions">
            <summary>
            Extensions of tasks
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.IsActive(System.Threading.Tasks.Task)">
            <summary>
            Returns true if the target Task has not yet run, is waiting, or is running, else returns false.
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.EnsureStarted(System.Threading.Tasks.Task,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Checks the status of the task and attempts to start it if waiting to start (TaskStatus.Created).
            </summary>
            <param name="target">The task to ensure start.</param>
            <param name="scheduler">Optional scheduler to use.</param>
            <returns>True if start attempt was successful.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnFullfilled``1(``0,System.Action)">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results.  Only invokes the action if completed and not cancelled.
            </summary>
            <typeparam name="TTask">The return type is the same as the target.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if fullfulled.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnFullfilled``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results.  Only invokes the action if completed and not cancelled.
            </summary>
            <typeparam name="T">The return type is the same as the target.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if fullfulled.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnFullfilled``2(``0,System.Func{``1})">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results.  Only invokes the action if completed and not cancelled.
            </summary>
            <typeparam name="TTask">The task type.</typeparam>
            <typeparam name="T">The return type of the task.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if fullfulled.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnFaulted``1(``0,System.Action{System.Exception})">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results. Only invokes the action if faulted.
            </summary>
            <typeparam name="TTask">The return type is the same as the target.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if faulted.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnCancelled``1(``0,System.Action)">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results.  Only invokes the action if cancelled.
            </summary>
            <typeparam name="TTask">The return type is the same as the target.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if cancelled.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TasksExtensions.OnCancelled``2(``0,System.Func{``1})">
            <summary>
            Utility method that can be chained with other methods for reacting to Task results.  Only invokes the action if cancelled.
            </summary>
            <typeparam name="TTask">The task type.</typeparam>
            <typeparam name="T">The return type of the task.</typeparam>
            <param name="target">The task.</param>
            <param name="action">The action to perform if cancelled.</param>
            <returns>The target object.  Allows for method chaining.</returns>
        </member>
        <member name="T:Cosmos.Asynchronous.TimeoutHandler">
            <summary>
            Timeout handler
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.TimeoutHandler.New(System.Int32,System.Action{System.Int32})">
            <summary>
            New
            </summary>
            <param name="delay"></param>
            <param name="onComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TimeoutHandler.New(System.Int32,System.IDisposable@,System.Action{System.Int32})">
            <summary>
            New
            </summary>
            <param name="delay"></param>
            <param name="timeout"></param>
            <param name="onComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TimeoutHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Asynchronous.ValueTaskFactory">
            <summary>
            ValueTask factory
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ValueTaskFactory.FromResult``1(``0)">
            <summary>
            From result
            </summary>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.ValueTaskFactory.FromException``1(System.Exception)">
            <summary>
            From exception
            </summary>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.ValueTasks">
            <summary>
            ValueTask utilities
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.ValueTasks.Create``1(``0)">
            <summary>
            Create a new ValueTask instance from given result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Asynchronous.TaskExtensions">
            <summary>
            Task extensions
            </summary>
            <summary>
            Extensions for task
            </summary>
            <summary>
            TaskCompletionSource extensions
            </summary>
            <summary>
            TextReader Extensions
            </summary>
            <summary>
            ValueTask extensions
            </summary>
            <summary>
            Extensions for task
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.RunInContext(System.Threading.Tasks.Task)">
            <summary>
            Run in AsyncContext
            </summary>
            <param name="task"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.RunInContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Run in AsyncContext
            </summary>
            <param name="task"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Action{System.Exception},System.Boolean)">
            <summary>
            Safety execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire and Forget".<br />
            Inspired by John Thiriet's blog post, "Removing Async Void": https://jhonthiriet.com/removing-async-void/.
            </summary>
            <param name="task"></param>
            <param name="exceptionAction"></param>
            <param name="continueOnCapturedContext"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.SafeFireAndForget``1(System.Threading.Tasks.Task,System.Action{``0},System.Boolean)">
            <summary>
            Safety execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire and Forget".<br />
            Inspired by John Thiriet's blog post, "Removing Async Void": https://jhonthiriet.com/removing-async-void/.
            </summary>
            <param name="task"></param>
            <param name="exceptionAction"></param>
            <param name="continueOnCapturedContext"></param>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.Initialize(System.Boolean)">
            <summary>
            Initialize SafeFireAndForget
            </summary>
            <param name="shouldAlwaysRethrowException"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.RemoveDefaultExceptionHandling">
            <summary>
            Remove the default action for SafeFireAndForget
            </summary>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.SetDefaultExceptionHanding(System.Action{System.Exception})">
            <summary>
            Set the default action for SafeFireAndForget to handle every exception
            </summary>
            <param name="exceptionAction"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.TryCompleteFromCompletedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Try CompleteFromCompletedTask
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="taskCompletionSource"></param>
            <param name="completedTask"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Continue With Synchronously
            </summary>
            <param name="task"></param>
            <param name="continuationAction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
            <summary>
            Continue With Synchronously
            </summary>
            <param name="task"></param>
            <param name="continuationAction"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="continuationFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="continuationFunc"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="continuationAction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0},System.Object},System.Object)">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="continuationAction"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1})">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TNewResult"></typeparam>
            <param name="task"></param>
            <param name="continuationFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ContinueWithSynchronously``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Object,``1},System.Object)">
            <summary>
            Continue With Synchronously
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TNewResult"></typeparam>
            <param name="task"></param>
            <param name="continuationFunc"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.ToCancellationTokenSource(System.Threading.Tasks.Task)">
            <summary>
            To CancellationTokenSource
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.GetEnumerable(System.IO.TextReader)">
            <summary>
            Get enumerable
            </summary>
            <param name="textReader"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.RunInContext``1(System.Threading.Tasks.ValueTask{``0}@)">
            <summary>
            Run in AsyncContext
            </summary>
            <param name="task"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.SafeFireAndForget(System.Threading.Tasks.ValueTask,System.Action{System.Exception},System.Boolean)">
            <summary>
            Safety execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire and Forget".<br />
            Inspired by John Thiriet's blog post, "Removing Async Void": https://jhonthiriet.com/removing-async-void/.
            </summary>
            <param name="task"></param>
            <param name="exceptionAction"></param>
            <param name="continueOnCapturedContext"></param>
        </member>
        <member name="M:Cosmos.Asynchronous.TaskExtensions.SafeFireAndForget``1(System.Threading.Tasks.ValueTask,System.Action{``0},System.Boolean)">
            <summary>
            Safety execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire and Forget".<br />
            Inspired by John Thiriet's blog post, "Removing Async Void": https://jhonthiriet.com/removing-async-void/.
            </summary>
            <param name="task"></param>
            <param name="exceptionAction"></param>
            <param name="continueOnCapturedContext"></param>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="T:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1">
            <summary>
            Bounded concurrent queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1"/>.
            </summary>
            <param name="queueLimit"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1.Count">
            <summary>
            Gets queue count
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            Try dequeue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.BoundedConcurrentQueue`1.TryEnqueue(`0)">
            <summary>
            Try enqueue
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Collections.Concurrent.ConcurrentSet`1">
            <summary>
            Concurrent Set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Collections.Concurrent.ConcurrentSet`1.IsEmpty">
            <summary>
            Is empty
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Concurrent.ConcurrentSet`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Cosmos.Collections.Concurrent.ConcurrentSet`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.TryAdd(`0)">
            <summary>
            Try add
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.TryRemove(`0)">
            <summary>
            Try remove
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.Values">
            <summary>
            Values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Collections.Concurrent.ConcurrentSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposableAction">
            <summary>
            Asynchronous Disable Action. <br />
            When the derived class of this class is disposed, the specified <see cref="T:System.Action"/> will be executed async.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableAction.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousDisposableAction"/> instance.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableAction.InvokeAsync">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposableActionField`1">
            <summary>
            Asynchronous Disposable Action Field
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableActionField`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousDisposableActionField`1"/> instance.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousDisposableActionField`1.IsEmpty">
            <summary>
            To flag this field is empty or not.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableActionField`1.TryGetAndUnset">
            <summary>
            Atomically retrieves this disposable action from the field, and sets such field to <c>null</c>. May return <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableActionField`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update context of disposable action stored in this field, Return <c>false</c> if the field is <c>null</c>. 
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposableAction`1">
            <summary>
            Asynchronous Generic Disable Action. <br />
            When the derived class of this class is disposed, the specified <see cref="T:System.Action`1"/> will be executed async.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableAction`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousDisposableAction`1"/> instance.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableAction`1.#ctor(Cosmos.Disposables.AsynchronousDisposableAction{`0},System.Func{`0,`0})">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousDisposableAction`1"/> instance.
            </summary>
            <param name="originalDisposableAction"></param>
            <param name="contextUpdater"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableAction`1.InvokeAsync">
            <summary>
            Invoke the disposable action async with context
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposableBase">
            <summary>
            A base class for properly implementing IAsyncDisposable but also allowing for synchronous use of IDispose.
            Only implementing OnDisposeAsync is enough to properly handle disposal.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableBase.OnDisposeAsync">
            <summary>
            Without overriding OnDispose, OnDisposeAsync will be called no matter what depending on how the object is disposed.<br />
            If asynchronous istrue, was called by .DisposeAsync(), otherwise.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposableBase.DisposeAsync">
            <summary>
            Dispose async
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousAnonymousDisposableObject">
            <summary>
            AsAnonymous Disposable Object
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousAnonymousDisposableObject"/> instance.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousAnonymousDisposableObject"/> instance.
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.#ctor(Cosmos.Disposables.AsynchronousDisposableAction)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AsynchronousAnonymousDisposableObject"/> instance.
            </summary>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.DisposeAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Dispose.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.Add(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Add dispose <see cref="T:System.Action"/>.
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.Add(Cosmos.Disposables.AsynchronousDisposableAction)">
            <summary>
            Add dispose <see cref="T:System.Action"/>.
            </summary>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.Create(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new disposable that executes dispose when disposed.
            </summary>
            <param name="dispose"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousAnonymousDisposableObject.Create(Cosmos.Disposables.AsynchronousDisposableAction)">
            <summary>
            Create a new disposable that executes dispose when disposed.
            </summary>
            <param name="disposableAction"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousNoopDisposableObject">
            <summary>
            An asynchronous disposable implement which does nothing when disposed.
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousNoopDisposableObject.Instance">
            <summary>
            Gets a <see cref="T:Cosmos.Disposables.AsynchronousNoopDisposableObject"/> cache.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousNoopDisposableObject.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousNoopDisposableObject.DisposeAsync">
            <summary>
            Dispose async
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousSingleDisposableObject`1">
            <summary>
            Asynchronous Single Disposable Object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.#ctor(`0)">
            <summary>
            Create a asynchronous single disposable object for such context
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.IsDisposeStarted">
            <summary>
            To flag this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.IsDisposed">
            <summary>
            To flag this instance is disposed, which means finished disposing.
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.IsDisposing">
            <summary>
            To flag this instance is currently disposing, but not finished yet.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.DisposeAsync(`0)">
            <summary>
            The actual disposal method, call only once from Dispose.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.OnDisposeAsync">
            <summary>
            On Dispose async
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleDisposableObject`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns false if this instance has already been disposed or is being disposed.
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1">
            <summary>
            Asynchronous Single Nonblocking Disposable Object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.#ctor(`0)">
            <summary>
            Create a single nonblocking disposable object for such context
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.IsDisposeStarted">
            <summary>
            To flag this instance is currently disposing or has been disposed.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.DisposeAsync(`0)">
            <summary>
            The actual disposal method, call only once from Dispose
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.DisposeAsync">
            <summary>
            Dispose async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousSingleNonblockingDisposableObject`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. This method returns false if this instance has already been disposed or is being disposed.
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposeHandler">
            <summary>
            Asynchronous dispose handler
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler.#ctor">
            <summary>
            Internal protected dispose handler
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.AsynchronousDisposeHandler"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler.ActionUpdate(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Internal protected dispose action update
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousDisposeHandler.InternalAction">
            <summary>
            Internal protected action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler.OnDisposeAsync">
            <summary>
            On dispose async
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.AsynchronousDisposeHandler`1">
            <summary>
            Asynchronous dispose handler
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.AsynchronousDisposeHandler`1"/>
            </summary>
            <param name="context"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0,System.Func{`0,`0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.AsynchronousDisposeHandler`1"/>
            </summary>
            <param name="action"></param>
            <param name="originalContext"></param>
            <param name="contextUpdater"></param>
        </member>
        <member name="P:Cosmos.Disposables.AsynchronousDisposeHandler`1.Context">
            <summary>
            Gets context
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.AsynchronousDisposeHandler`1.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AsynchronousDisposeHandler`1.OnDisposeAsync">
            <summary>
            On dispose async
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Threading.AsyncLock">
            <summary>
            AsyncLock
            </summary>
        </member>
        <member name="T:Cosmos.Threading.CosmosSemaphoreSlimExtensions">
            <summary>
            Cosmos SemaphoreSlim extensions
            </summary>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.Execute(System.Threading.Semaphore,System.Action)">
            <summary>
            Executes an action within the context of a a Semaphore.
            </summary>
            <param name="target">The semaphore instance</param>
            <param name="closure">The action to execute.</param>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.Execute(System.Threading.SemaphoreSlim,System.Action)">
            <summary>
            Executes an action within the context of a a SemaphoreSlim.
            </summary>
            <param name="target">The semaphore instance</param>
            <param name="closure">The action to execute.</param>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.Execute``1(System.Threading.Semaphore,System.Func{``0})">
            <summary>
            Executes a function within the context of a a Semaphore.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="target">The semaphore instance</param>
            <param name="closure">The function to execute.</param>
            <returns>The value of the function.</returns>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.Execute``1(System.Threading.SemaphoreSlim,System.Func{``0})">
            <summary>
            Executes a function within the context of a a SemaphoreSlim.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="target">The semaphore instance</param>
            <param name="closure">The function to execute.</param>
            <returns>The value of the function.</returns>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.ExecuteAsync``1(System.Threading.SemaphoreSlim,System.Func{``0})">
            <summary>
            Executes a task within the context of a a SemaphoreSlim.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="target">The semaphore instance</param>
            <param name="closure">The function to execute as a task.</param>
            <returns>A task containing the result.</returns>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.TaskExecuteAsync``1(System.Threading.SemaphoreSlim,System.Threading.Tasks.Task{``0})">
            <summary>
            Executes a task within the context of a a SemaphoreSlim.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="target">The semaphore instance</param>
            <param name="task">The task being waited on.</param>
            <returns>The task provided.</returns>
        </member>
        <member name="M:Cosmos.Threading.CosmosSemaphoreSlimExtensions.ExecuteAsync``1(System.Threading.SemaphoreSlim,System.Threading.Tasks.ValueTask{``0})">
            <summary>
            Executes a task within the context of a a SemaphoreSlim.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="target">The semaphore instance</param>
            <param name="task">The task being waited on.</param>
            <returns>The task provided.</returns>
        </member>
        <member name="T:System.IO.StreamWithState`1">
            <summary>
            Stream with state
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.IO.StreamWithState`1.#ctor(System.IO.Stream,`0)">
            <summary>
            Create a new instance of <see cref="T:System.IO.StreamWithState`1"/>
            </summary>
            <param name="stream"></param>
            <param name="state"></param>
        </member>
        <member name="P:System.IO.StreamWithState`1.State">
            <summary>
            State
            </summary>
        </member>
        <member name="M:System.IO.StreamWithState`1.Flush">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.CanRead">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.Length">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.Position">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.CanTimeout">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.ReadByte">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.StreamWithState`1.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:System.IO.StreamWithState`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:System.Linq.AsyncEnumerable">
            <summary>
            Async Enumerable
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.#ctor(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.AsyncEnumerable"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.AsyncEnumerable.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerable.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.CreateFrom(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Create from...
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.AsyncEnumerable`1">
            <summary>
            Async Enumerable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Linq.AsyncEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.AsyncEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.AsyncEnumerable`1.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerable`1.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerable`1.CreateFrom(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create from...
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.AsyncEnumerator">
            <summary>
            Async enumerator
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerator.#ctor(System.Collections.IEnumerator,System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.AsyncEnumerator"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.AsyncEnumerator.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerator.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="T:System.Linq.AsyncEnumerator`1">
            <summary>
            Async enumerator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Linq.AsyncEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.AsyncEnumerator`1"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.AsyncEnumerator`1.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerator`1.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:System.Linq.AsyncEnumerator`1.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerator`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerator`1.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncEnumerator`1.Reset">
            <inheritdoc />
        </member>
        <member name="T:System.Linq.AsyncOrderedEnumerable`1">
            <summary>
            Async ordered enumerable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Linq.AsyncOrderedEnumerable`1.#ctor(System.Linq.IOrderedEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.AsyncOrderedEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.AsyncOrderedEnumerable`1.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:System.Linq.AsyncOrderedEnumerable`1.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="M:System.Linq.AsyncOrderedEnumerable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.AsyncOrderedEnumerable`1.CreateFrom(System.Linq.IOrderedEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create from...
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Async.AsyncWhereEnumerable`1">
            <summary>
            Async Where Enumerable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.#ctor(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Create a new instance of <see cref="T:System.Linq.Async.AsyncWhereEnumerable`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="P:System.Linq.Async.AsyncWhereEnumerable`1.StartPredicateConcurrently">
            <summary>
            Start Predicate Concurrently
            </summary>
        </member>
        <member name="P:System.Linq.Async.AsyncWhereEnumerable`1.OrderByPredicateCompletion">
            <summary>
            Order By Predicate Completion
            </summary>
        </member>
        <member name="P:System.Linq.Async.AsyncWhereEnumerable`1.SkipFilterPredicate">
            <summary>
            Skip Filter Predicate
            </summary>
        </member>
        <member name="P:System.Linq.Async.AsyncWhereEnumerable`1.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Linq.Async.AsyncWhereEnumerable`1.CreateFrom(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Create from...
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Async.LinqAsyncManager">
            <summary>
            Linq Async Manager
            </summary>
        </member>
        <member name="T:System.Linq.Async.LinqAsyncManager.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:System.Linq.Async.LinqAsyncManager.DefaultValue.OrderByPredicateCompletion">
            <summary>
            Order By Predicate Completion
            </summary>
        </member>
        <member name="P:System.Linq.Async.LinqAsyncManager.DefaultValue.StartPredicateConcurrently">
            <summary>
            Start Predicate Concurrently
            </summary>
        </member>
        <member name="T:System.Linq.Extensions">
            <summary>
            Extensions for array
            </summary>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            As enumerable{T}
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Cast``2(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Cast to...
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Concat``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Concat
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{``0[]},``0,System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfType``2(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Of type
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Reverse``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Reverse
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Zip``3(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Zip
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Skip``1(System.Threading.Tasks.Task{``0[]},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Skip
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Take``1(System.Threading.Tasks.Task{``0[]},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Take
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable{TSource}
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Cast``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Cast to
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Concat``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Concat
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfType``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Of type
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Reverse``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Reverse
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Zip``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Zip
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Skip``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Skip
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Select while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Select while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Take``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Take
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.ObjectModel.Collection{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``2(System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.Generic.ICollection{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``2(System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Cast``1(System.Threading.Tasks.Task{System.Collections.IEnumerable},System.Threading.CancellationToken)">
            <summary>
            Cast to
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.CastAsync``1(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Cast to async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfType``1(System.Threading.Tasks.Task{System.Collections.IEnumerable},System.Threading.CancellationToken)">
            <summary>
            Of type
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfTypeAsync``1(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Of type async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerableAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            As enumerable async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ConcatAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Concat async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmptyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Default if empty async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmptyAsync``1(System.Collections.Generic.IEnumerable{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Default if empty async
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DistinctAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DistinctAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct async
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Except async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Except async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.IntersectAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.IntersectAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.JoinAsync``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Threading.CancellationToken)">
            <summary>
            Join async
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.JoinAsync``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Join async
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ReverseAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Reverse async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.UnionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Union async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.UnionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Union async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ZipAsync``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Zip async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupByAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoinAsync``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Threading.CancellationToken)">
            <summary>
            Group join async
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoinAsync``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Group join async
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescendingAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescendingAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Select async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1},System.Threading.CancellationToken)">
            <summary>
            Select async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectManyAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectManyAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectManyAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many async
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectManyAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many async
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Skip async
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Take async
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.Generic.IList{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Cast``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Cast
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Concat``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Concat
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Threading.CancellationToken)">
            <summary>
            Jion
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Jion
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfType``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Of type
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Reverse``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Reverse
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Zip``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Zip
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Skip``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Skip
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Take``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Take
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``2(System.Threading.Tasks.Task{System.Linq.Lookup{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``2(System.Threading.Tasks.Task{System.Linq.ILookup{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``2(System.Threading.Tasks.Task{``0[]},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``3(System.Threading.Tasks.Task{``0[]},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.All``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Int32[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Nullable{System.Int32}[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Int64[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Nullable{System.Int64}[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Single[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Nullable{System.Single}[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Double[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Nullable{System.Double}[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Decimal[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Nullable{System.Decimal}[]},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{``0[]},``0,System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{``0[]},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAt``1(System.Threading.Tasks.Task{``0[]},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Int32[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Nullable{System.Int32}[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Int64[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Nullable{System.Int64}[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Double[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Nullable{System.Double}[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Single[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Nullable{System.Single}[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Decimal[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Nullable{System.Decimal}[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Int32[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Nullable{System.Int32}[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Int64[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Nullable{System.Int64}[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Single[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Nullable{System.Single}[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Double[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Nullable{System.Double}[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Decimal[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Nullable{System.Decimal}[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{``0[]},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Int32[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Nullable{System.Int32}[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Int64[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Nullable{System.Int64}[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Single[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Nullable{System.Single}[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Double[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Nullable{System.Double}[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Decimal[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Nullable{System.Decimal}[]},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArray``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            To array
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToList``1(System.Threading.Tasks.Task{``0[]},System.Threading.CancellationToken)">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{``0[]},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.All``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAt``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArray``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            To array
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToList``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AggregateAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate async
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AggregateAsync``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate async
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AggregateAsync``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate async
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AnyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Any async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AnyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AverageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ContainsAsync``1(System.Collections.Generic.IEnumerable{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Contains async
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ContainsAsync``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains async
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.CountAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Count async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.CountAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at async
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default async
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            First async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            First or default async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Last async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Last or default async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCountAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Long count async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCountAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MaxAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.MinAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqualAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence equal async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqualAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence equal async
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Single async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Single or default async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SumAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum async
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArrayAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            To array async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionaryAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionaryAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionaryAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionaryAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            To list async
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookupAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookupAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookupAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookupAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.All``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAt``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArray``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            TO array
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToList``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.All``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAt``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Last of default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Single of default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArray``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            TO array
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToList``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Aggregate``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Aggregate
            </summary>
            <param name="source"></param>
            <param name="seed"></param>
            <param name="func"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TAccumulate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.All``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Average``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Average
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Contains``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Contains
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAt``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ElementAtOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Element at or default
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Max``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Max
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Min``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Min
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SequenceEqual``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Sequence Equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum(System.Threading.Tasks.Task{System.Collections.Generic.List{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Sum``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Sum
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToArray``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            To array
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToDictionary``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To dictionary
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToList``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Threading.CancellationToken)">
            <summary>
            To list
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``2(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ToLookup``3(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            To lookup
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Cast``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Cast
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Concat``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Concat
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.DefaultIfEmpty``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``0,System.Threading.CancellationToken)">
            <summary>
            Default if empty
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Distinct``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Distinct
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Except``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Except
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Intersect``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Intersect
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Join``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OfType``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Of type
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Reverse``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            Reverse
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Union``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Union
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Where``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Zip``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Zip
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupBy``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Group by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.GroupJoin``4(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2},System.Threading.CancellationToken)">
            <summary>
            Group join
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderBy``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByDescending``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Order by descending
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Select``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,``1},System.Threading.CancellationToken)">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``2(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectMany``3(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Threading.CancellationToken)">
            <summary>
            Select many
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Skip``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Skip
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.Take``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Take
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.TakeWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Take while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ThenByAsync``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Then by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ThenByAsync``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Then by async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ThenByDescendingAsync``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Then by descending async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.ThenByDescendingAsync``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Then by descending async
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.ObjectModel.ReadOnlyCollection{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``2(System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.AsEnumerable``1(System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{``0}},System.Threading.CancellationToken)">
            <summary>
            As enumerable
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByCompletion``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Order by completion
            </summary>
            <param name="tasks"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.SelectResult``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Select result
            </summary>
            <param name="source"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.OrderByPredicateCompletion``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Order By Predicate Completion
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Extensions.StartPredicateConcurrently``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Start Predicate Concurrently
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="T:System.Linq.PredicateAsyncExtensions">
            <summary>
            Predicate Async Extensions
            </summary>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhileAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.WhereAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip while
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SkipWhile``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Skip where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.All``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Any``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Count``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.First``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Last``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LongCount``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Single``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefault``1(System.Threading.Tasks.Task{``0[]},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.All``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Any``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Count``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.First``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Last``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Single``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.AnyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.CountAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefaultAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default async
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.All``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            ANy
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.All``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Any``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            ANy
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Count``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.First``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Last``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LongCount``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Single``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.All``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            All
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Any``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Count``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.First``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.FirstOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            First or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Last``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LastOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Last or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.LongCount``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Long count
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.Single``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.PredicateAsyncExtensions.SingleOrDefault``1(System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Single or default
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="T:System.Linq.TaskFactoryExtensions">
            <summary>
            Task factory extensions
            </summary>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``5(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``6(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``7(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0[]},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``5(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``6(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``7(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Async.AsyncWhereEnumerable{``0}},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.ICollection{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.ObjectModel.Collection{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``1(System.Threading.Tasks.TaskFactory,System.Collections.IEnumerable,System.Func{System.Collections.IEnumerable,``0},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.IEnumerable},System.Func{System.Collections.IEnumerable,``0},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``2(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``3(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``4(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``5(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``6(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``7(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="souce"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``3(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="funcAsync"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``2(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``1},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="skipFilterPredicate"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``5(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``6(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``7(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``1},System.Threading.CancellationToken)">
            <summary>
            From task enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromWhereEnumerable``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromWhereEnumerable``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromWhereTaskEnumerable``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            From Where Task Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromWhereTaskEnumerable``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Collections.Generic.IEnumerable{``0}},System.Threading.CancellationToken)">
            <summary>
            From Where Task Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="predicate"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IList{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.ILookup{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.Lookup{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``3(System.Threading.Tasks.TaskFactory,System.Linq.IOrderedEnumerable{``0},``1,System.Func{System.Linq.IOrderedEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromEnumerable``4(System.Threading.Tasks.TaskFactory,System.Linq.IOrderedEnumerable{``0},``1,``2,System.Func{System.Linq.IOrderedEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="source"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``5(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``6(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``7(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},System.Func{System.Linq.IOrderedEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,System.Func{System.Linq.IOrderedEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Linq.IOrderedEnumerable{``0}},``1,``2,System.Func{System.Linq.IOrderedEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.ObjectModel.ReadOnlyCollection{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``2(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},``1},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``3(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``4(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,``2,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``5(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,``2,``3,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``6(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,``2,``3,``4,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.TaskFactoryExtensions.FromTaskEnumerable``7(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}},``1,``2,``3,``4,``5,System.Func{System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken)">
            <summary>
            From Where Enumerable
            </summary>
            <param name="taskFactory"></param>
            <param name="task"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="p5"></param>
            <param name="func"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <typeparam name="TP3"></typeparam>
            <typeparam name="TP4"></typeparam>
            <typeparam name="TP5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.Remoting.Messaging.CallContext`1">
            <summary>
            Call Context
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Runtime.Remoting.Messaging.CallContext`1.SetData(System.String,`0)">
            <summary>
            Set data
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Runtime.Remoting.Messaging.CallContext`1.GetData(System.String)">
            <summary>
            Get data
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
    </members>
</doc>
