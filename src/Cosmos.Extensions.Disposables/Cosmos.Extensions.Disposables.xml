<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Disposables</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Disposables.DisposableAction">
            <summary>
            Disable Action. <br />
            When the derived class of this class is disposed, the specified <see cref="T:System.Action"/> will be executed. <br />
            释放操作。当派生类释放时，指定的操作 <see cref="T:System.Action"/> 将被执行。
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableAction.#ctor(System.Action)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.DisposableAction"/> instance.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableAction.Invoke">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Disposables.DisposableAction.Noop">
            <summary>
            Get a cached instance of <see cref="T:Cosmos.Disposables.NoopDisposableAction"/>. <br />
            获取一个缓存了的 <see cref="T:Cosmos.Disposables.NoopDisposableAction"/> 实例。
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.NoopDisposableAction">
            <summary>
            A disposable action implement which does nothing when disposed. <br />
            当释放时什么都不做
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.NoopDisposableAction.Instance">
            <summary>
            Gets a <see cref="T:Cosmos.Disposables.NoopDisposableAction"/> cache.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.NoopDisposableAction.Invoke">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Disposables.NoopDisposableAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Disposables.DisposableActionField`1">
            <summary>
            Disposable Action Field <br />
            可释放操作
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.DisposableActionField`1.#ctor(System.Action{`0},`0)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.DisposableActionField`1"/> instance.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.DisposableActionField`1.IsEmpty">
            <summary>
            To flag this field is empty or not. <br />
            标记字段是否为空
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableActionField`1.TryGetAndUnset">
            <summary>
            Atomically retrieves this disposable action from the field, and sets such field to <c>null</c>. May return <c>null</c>. <br />
            以原子方式从字段中检索此一次性操作，并将此类字段设置为 <c>null</c>。 可能返回 <c>null</c>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.DisposableActionField`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update context of disposable action stored in this field, Return <c>false</c> if the field is <c>null</c>.  <br />
            尝试更新存储在此字段中的一次性操作的上下文，如果该字段为 <c>null</c>，则返回 <c>false</c>。
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.DisposableAction`1">
            <summary>
            Generic Disable Action. <br />
            When the derived class of this class is disposed, the specified <see cref="T:System.Action`1"/> will be executed. <br />
            泛型释放操作。当派生类释放时，特定的 <see cref="T:System.Action`1"/> 将被执行。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.DisposableAction`1.#ctor(System.Action{`0},`0)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.DisposableAction`1"/> instance.
            </summary>
            <param name="action"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableAction`1.#ctor(Cosmos.Disposables.DisposableAction{`0},System.Func{`0,`0})">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.DisposableAction`1"/> instance.
            </summary>
            <param name="originalDisposableAction"></param>
            <param name="contextUpdater"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableAction`1.Invoke">
            <summary>
            Invoke the disposable action with context <br />
            调用带上下文的释放操作
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DisposableAction`1.Noop">
            <summary>
            Get a cached instance of <see cref="T:Cosmos.Disposables.NoopDisposableAction"/>. <br />
            获取一个缓存了的 <see cref="T:Cosmos.Disposables.NoopDisposableAction"/> 实例。
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.DeferredCleanupBase">
            <summary>
            Deferred cleanup base <br />
            延迟清理基类
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DeferredCleanupBase.CleanupDelay">
            <summary>
            Gets or sets cleanup delay <br />
            设置或获取延迟量，单位为毫秒
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Cosmos.Disposables.DeferredCleanupBase.LastCleanup">
            <summary>
            Time of last cleanup <br />
            最后一次清理的时间
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DeferredCleanupBase.IsCleanupPastDue">
            <summary>
            Is cleanup past due <br />
            标记是否清理过期
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DeferredCleanupBase.IsRunning">
            <summary>
            Is running <br />
            标记是否正在清理
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.ResetTimer">
            <summary>
            Reset timer <br />
            重置计时器
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.SetCleanup(Cosmos.Disposables.DeferredCleanupBase.CleanupMode)">
            <summary>
            Set cleanup <br />
            设置清理模式
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.DeferCleanup">
            <summary>
            Defer cleanup <br />
            延迟清理
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.ClearCleanup">
            <summary>
            Clear cleanup <br />
            清除清理
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.OnCleanup">
            <summary>
            On cleanup
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Disposables.DeferredCleanupBase.Finalize">
            <summary>
            Release DeferredCleanupBase
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.DeferredCleanupBase.CleanupMode">
            <summary>
            Cleanup mode <br />
            清理模式
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DeferredCleanupBase.CleanupMode.ImmediateSynchronous">
            <summary>
            Cleanup immediately within the current thread. <br />
            在当前线程内立即清理。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DeferredCleanupBase.CleanupMode.ImmediateSynchronousIfPastDue">
            <summary>
            Cleanup immediately if time is past due. <br />
            逾期立即清理。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DeferredCleanupBase.CleanupMode.ImmediateDeferred">
            <summary>
            Cleanup immediately within another thread. <br />
            在另一个线程中立即清理。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DeferredCleanupBase.CleanupMode.ImmediateDeferredIfPastDue">
            <summary>
            Cleanup immediately in another thread if time is past due. <br />
            如果时间已过，请立即在另一个线程中进行清理。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DeferredCleanupBase.CleanupMode.Deferred">
            <summary>
            Extend the timer. <br />
            延长计时器。
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.AnonymousDisposableObject">
            <summary>
            Anonymous Disposable Object <br />
            匿名可释放对象
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AnonymousDisposableObject"/> instance.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.#ctor(System.Action)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AnonymousDisposableObject"/> instance.
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.#ctor(Cosmos.Disposables.DisposableAction)">
            <summary>
            Create a new <see cref="T:Cosmos.Disposables.AnonymousDisposableObject"/> instance.
            </summary>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.Dispose(System.Action)">
            <summary>
            Dispose.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.Add(System.Action)">
            <summary>
            Add dispose <see cref="T:System.Action"/>.
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.Add(Cosmos.Disposables.DisposableAction)">
            <summary>
            Add dispose <see cref="T:System.Action"/>.
            </summary>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.Create(System.Action)">
            <summary>
            Create a new disposable that executes dispose when disposed.
            </summary>
            <param name="dispose"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.AnonymousDisposableObject.Create(Cosmos.Disposables.DisposableAction)">
            <summary>
            Create a new disposable that executes dispose when disposed.
            </summary>
            <param name="disposableAction"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.NoopDisposableObject">
            <summary>
            A disposable implement which does nothing when disposed. <br />
            不做任何事情的可释放对象
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.NoopDisposableObject.Instance">
            <summary>
            Gets a <see cref="T:Cosmos.Disposables.NoopDisposableObject"/> cache.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.NoopDisposableObject.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.SingleDisposableObject`1">
            <summary>
            Single Disposable Object <br />
            可释放对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.SingleDisposableObject`1.#ctor(`0)">
            <summary>
            Create a single disposable object for such context
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.SingleDisposableObject`1.IsDisposeStarted">
            <summary>
            To flag this instance is currently disposing or has been disposed. <br />
            标记此实例当前正在处置或已处置。
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.SingleDisposableObject`1.IsDisposed">
            <summary>
            To flag this instance is disposed, which means finished disposing. <br />
            标记此实例已处置，即处置完毕。
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.SingleDisposableObject`1.IsDisposing">
            <summary>
            To flag this instance is currently disposing, but not finished yet. <br />
            标记此实例当前正在处理，但尚未完成。
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.SingleDisposableObject`1.Dispose(`0)">
            <summary>
            The actual disposal method, call only once from Dispose.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.SingleDisposableObject`1.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.SingleDisposableObject`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. <br />
            This method returns false if this instance has already been disposed or is being disposed. <br />
            尝试更新存储的上下文。 如果此实例已被释放或正在被释放，则此方法返回 false。
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.SingleNonblockingDisposableObject`1">
            <summary>
            Single Nonblocking Disposable Object <br />
            非阻塞可释放对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.SingleNonblockingDisposableObject`1.#ctor(`0)">
            <summary>
            Create a single nonblocking disposable object for such context
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Cosmos.Disposables.SingleNonblockingDisposableObject`1.IsDisposeStarted">
            <summary>
            To flag this instance is currently disposing or has been disposed. <br />
            标记此实例当前正在处置或已处置。
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.SingleNonblockingDisposableObject`1.Dispose(`0)">
            <summary>
            The actual disposal method, call only once from <see cref="M:Cosmos.Disposables.SingleNonblockingDisposableObject`1.Dispose(`0)"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.Disposables.SingleNonblockingDisposableObject`1.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.SingleNonblockingDisposableObject`1.TryUpdateContext(System.Func{`0,`0})">
            <summary>
            Attempts to update the stored context. <br />
            This method returns false if this instance has already been disposed or is being disposed. <br />
            尝试更新存储的上下文。 如果此实例已被释放或正在被释放，则此方法返回 false。
            </summary>
            <param name="contextUpdater"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.CollectionDisposableObjects">
            <summary>
            Collection disposable objects <br />
            一组可释放对象
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.CollectionDisposableObjects._count">
            <summary>
            Count <br />
            数量
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.#ctor(System.IDisposable[])">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.CollectionDisposableObjects"/>.
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.CollectionDisposableObjects"/>.
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="P:Cosmos.Disposables.CollectionDisposableObjects.Count">
            <summary>
            Count <br />
            数量
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Dispose(System.Collections.Immutable.ImmutableQueue{System.IDisposable})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Add(System.IDisposable)">
            <summary>
            Add <br />
            添加
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.IDisposable[])">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.DisposableObjects">
            <summary>
            Disposable objects <br />
            抽象的可释放对象
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.DisposableObjects"/>.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableObject``1(``0)">
            <summary>
            Add disposable object
            </summary>
            <param name="obj"></param>
            <typeparam name="TDisposableObj"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableObjects(System.Object[])">
            <summary>
            Add a set of disposable objects <br />
            添加一个可是放对象
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,System.Action)">
            <summary>
            Add disposable action <br />
            添加一个可释放操作
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.DisposableAction)">
            <summary>
            Add disposable action <br />
            添加一个可释放操作
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.AnonymousDisposableObject)">
            <summary>
            Add disposable action <br />
            添加一个可释放操作
            </summary>
            <param name="name"></param>
            <param name="anonymous"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.FacileDisposableObjects">
            <summary>
            Facile Disposable Objects <br />
            更易使用的可释放对象
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.FacileDisposableObjects"/>.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableObject``1(``0)">
            <summary>
            Add disposable object <br />
            添加可释放对象
            </summary>
            <param name="obj"></param>
            <typeparam name="TDisposableObj"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableObjects(System.Object[])">
            <summary>
            Add a set of disposable objects <br />
            添加一组可释放对象
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,System.Action)">
            <summary>
            Add disposable action <br />
            添加可释放操作
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.DisposableAction)">
            <summary>
            Add disposable action <br />
            添加可释放操作
            </summary>
            <param name="name"></param>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.AnonymousDisposableObject)">
            <summary>
            Add disposable action <br />
            添加可释放操作
            </summary>
            <param name="name"></param>
            <param name="anonymous"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.ContainDisposableAction(System.String)">
            <summary>
            Contains disposable action <br />
            检查是否存在指定名称的可释放操作
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.RemoveDisposableAction(System.String)">
            <summary>
            Remove disposable action <br />
            移除指定名称的可释放操作
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.ClearDisposableActions">
            <summary>
            Clear all disposable actions <br />
            清理所有可释放对象
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.Finalize">
            <summary>
            Facile Disposable Objects
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DisposableScope.RaiseExceptionIfNoScope">
            <summary>
            Raise an exception when call UseDisposableScope, no DisposableScope is found in context, default is true. <br />
            当调用 UseDisposableScope 时，发现上下文中没有找到 DisposableScope 时，是否抛出异常，默认为 true。
            </summary>
        </member>
        <member name="P:Cosmos.Disposables.DisposableScope.Option">
            <summary>
            Current <see cref="T:Cosmos.Disposables.DisposableScope"/> Option. <br />
            当前的 <see cref="T:Cosmos.Disposables.DisposableScope"/> 选项。
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Cosmos.Disposables.DisposableScopeExtensions">
            <summary>
            DisposableScope extensions
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to specified 
            key selector and element selector functions, as well as a comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a <see cref="T:System.ReadOnlySpan`1"/> according to specified 
            key selector and element selector functions, as well as a comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``3(System.Span{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a <see cref="T:System.Span`1"/> according to specified 
            key selector and element selector functions, as well as a comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``3(System.ReadOnlyMemory{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a <see cref="T:System.ReadOnlyMemory`1"/> according to specified 
            key selector and element selector functions, as well as a comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``3(System.Memory{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a <see cref="T:System.Memory`1"/> according to specified 
            key selector and element selector functions, as well as a comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to specified 
            key selector and comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.ReadOnlySpan`1"/> according to specified 
            key selector and comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Span{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.Span`1"/> according to specified 
            key selector and comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.ReadOnlyMemory{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.ReadOnlyMemory`1"/> according to specified 
            key selector and comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Memory{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from an <see cref="T:System.Memory`1"/> according to specified 
            key selector and comparer.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a sequence of key/value tuples.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a sequence of KeyValuePair values.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a sequence of key/value tuples.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.ReadOnlySpan{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a span of key/value tuples.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledDictionaryScope``2(System.Span{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Collections.Pooled.PooledDictionary`2"/> from a span of key/value tuples.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(``0[])">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(System.Span{``0})">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(System.ReadOnlyMemory{``0})">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledStackScope``1(System.Memory{``0})">
            <summary>
            Creates an instance of PooledStack from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(System.Span{``0})">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(System.ReadOnlyMemory{``0})">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(System.Memory{``0})">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableScopeExtensions.ToPooledQueueScope``1(``0[])">
            <summary>
            Creates an instance of PooledQueue from the given items.
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DisposableScopeOption.Required">
            <summary>
            A DisposeScope is required by the scope.
            It uses an ambient DisposeScope if one already exists.
            Otherwise, it creates a new DisposeScope before entering the scope.
            This is the default value. <br />
            在作用域中需要一个 DisposeScope。
            如果 DisposeScope 已经存在，则继续使用上下文中的 DisposeScope。
            如果不存在，则在进入作用域之前创建一个新的 DisposeScope。
            这是默认值。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DisposableScopeOption.RequiresNew">
            <summary>
            A new DisposeScope is always created for the scope. <br />
            总是创建一个新的 DisposeScope 用于作用域。
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DisposableScopeOption.Suppress">
            <summary>
            The ambient DisposeScope context is suppressed when creating the scope.
            All operations within the scope are done without an ambient DisposeScope context. <br />
            创建作用域时，禁用上下文中的 DisposeScope。
            所有在作用域中的操作都不会使用上下文中的 DisposeScope。
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.DisposeHandler">
            <summary>
            Dispose handler <br />
            释放处理器
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler.#ctor">
            <summary>
            Internal protected dispose handler
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler.#ctor(System.Action)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.DisposeHandler"/>
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler.ActionUpdate(System.Action)">
            <summary>
            Internal protected dispose action update
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Cosmos.Disposables.DisposeHandler.InternalAction">
            <summary>
            Internal protected action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.DisposeHandler`1">
            <summary>
            Dispose handler <br />
            释放处理器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler`1.#ctor(System.Action{`0},`0)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.DisposeHandler`1"/>
            </summary>
            <param name="context"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler`1.#ctor(System.Action{`0},`0,System.Func{`0,`0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.DisposeHandler`1"/>
            </summary>
            <param name="action"></param>
            <param name="originalContext"></param>
            <param name="contextUpdater"></param>
        </member>
        <member name="P:Cosmos.Disposables.DisposeHandler`1.Context">
            <summary>
            Gets context <br />
            获取上下文
            </summary>
        </member>
        <member name="F:Cosmos.Disposables.DisposeHandler`1.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposeHandler`1.OnDispose">
            <summary>
            On dispose
            </summary>
        </member>
    </members>
</doc>
