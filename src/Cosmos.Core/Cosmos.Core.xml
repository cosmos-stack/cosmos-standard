<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Core</name>
    </assembly>
    <members>
        <member name="T:Cosmos.ByteExtensions">
            <summary>
            Byte extensions <br />
            Byte 扩展
            </summary>
        </member>
        <member name="M:Cosmos.ByteExtensions.Max(System.Byte,System.Byte)">
            <summary>
            Gets max one. <br />
            获取大值。
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.Min(System.Byte,System.Byte)">
            <summary>
            Gets min one. <br />
            获取小值。
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.Resize(System.Byte[],System.Int32)">
            <summary>
            Resize <br />
            重新设置尺寸
            </summary>
            <param name="this"></param>
            <param name="newSize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ByteExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            Convert byte[] to <see cref="T:System.IO.MemoryStream"/> <br />
            转换类型，将 <see cref="T:System.Byte"/>[] 转换为 <see cref="T:System.IO.MemoryStream"/>
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.AsciiConvHelper">
            <summary>
            ASCII Conv Helper (internal)
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.AsciiConv">
            <summary>
            ASCII Conv <br />
            ASCII 转换工具
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.AsciiConv.BytesToAsciiString(System.Byte[])">
            <summary>
            Convert from bytes to ASCII <see cref="T:System.String"/>. <br />
            从字节转换为 ASCII
            </summary>
            <example>in: new byte[] {65, 66, 67}; out: ABC</example>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.AsciiConv.AsciiStringToBytes(System.String)">
            <summary>
            Convert from ASCII <see cref="T:System.String"/> to bytes. <br />
            从 ASCII 转换为字节
            </summary>
            <example>in: ABC; out: new byte[] {65, 66, 67}</example>
            <param name="asciiStr"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.BaseConv">
            <summary>
            BASE Conv <br />
            BASE 转换工具
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase32(System.Byte[])">
            <summary>
            Convert byte array to base32. <br />
            将字节数组转换为 BASE32
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase32(System.String)">
            <summary>
            Convert base32 to byte array. <br />
            将 BASE32 转换为 字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base32. <br />
            将字符串转换为 BASE32
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert base32 to string. <br />
            将 BASE32 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToZBase32(System.Byte[])">
            <summary>
            Convert byte array to ZBase32. <br />
            将字节数组转化为 ZBASE32
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromZBase32(System.String)">
            <summary>
            Convert ZBase32 to byte array. <br />
            将 ZBASE32 转换为字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToZBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to ZBase32. <br />
            将字符串转换为 ZBASE32
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromZBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert ZBase32 to string. <br />
            将 ZBASE32 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase64(System.Byte[])">
            <summary>
            Convert byte array to base64. <br />
            将字节数组转换为 BASE64
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase64(System.String)">
            <summary>
            Convert base64 to byte array. <br />
            将 BASE64 转换为字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base64. <br />
            将字符串转换为 BASE64
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert base64 to string. <br />
            将 BASE64 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase91(System.Byte[])">
            <summary>
            Convert byte array to base91. <br />
            将字节数组转换为 BASE91
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase91(System.String)">
            <summary>
            Convert base91 to byte array. <br />
            将 BASE91 转换为字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase91String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base91. <br />
            将字符串转换为 BASE91
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase91String(System.String,System.Text.Encoding)">
            <summary>
            Convert base91 to string. <br />
            将 BASE91 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase256(System.Byte[])">
            <summary>
            Convert byte array to base256. <br />
            将字节数组转换为 BASE256
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase256(System.String)">
            <summary>
            Convert base256 to byte array. <br />
            将 BASE256 转换为字节数组
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.ToBase256String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base256. <br />
            将字符串转换为 BASE256
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConv.FromBase256String(System.String,System.Text.Encoding)">
            <summary>
            Convert base256 to string. <br />
            将 BASE256 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.BaseConvExtensions">
            <summary>
            BASE Conv extensions. <br />
            BASE 转换工具扩展
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase32String(System.Byte[])">
            <summary>
            Convert byte array to base32. <br />
            将字节数组转换为 BASE32
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base32. <br />
            将字符串转换为 BASE32
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.FromBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert string from base32. <br />
            将 BASE32 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToZBase32String(System.Byte[])">
            <summary>
            Convert byte array to ZBase32. <br />
            将字节数组转换为 ZBASE32
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToZBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to ZBase32. <br />
            将字符串转换为 ZBASE32
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.FromZBase32String(System.String,System.Text.Encoding)">
            <summary>
            Convert ZBase32 to string. <br />
            将 ZBASE32 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase64String(System.Byte[])">
            <summary>
            Convert byte array to base64. <br />
            将字节数组转换为 BASE64
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base64. <br />
            将字符串转换为 BASE64
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert base64 to string. <br />
            将 BASE64 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase91String(System.Byte[])">
            <summary>
            Convert byte array to base91. <br />
            将字节数组转换为 BASE91
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase91String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base91. <br />
            将字符串转换为 BASE91
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.FromBase91String(System.String,System.Text.Encoding)">
            <summary>
            Convert base91 to string. <br />
            将 BASE91 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase256String(System.Byte[])">
            <summary>
            Convert byte array to base256. <br />
            将字节数组转换为 BASE256
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.ToBase256String(System.String,System.Text.Encoding)">
            <summary>
            Convert string to base256. <br />
            将字符串转换为 BASE256
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.BaseConvExtensions.FromBase256String(System.String,System.Text.Encoding)">
            <summary>
            Convert base256 to string. <br />
            将 BASE256 转换为字符串
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.Bin">
            <summary>
            Bin utilities. <br />
            二进制工具
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.Bin.Reverse(System.String)">
            <summary>
            Reverse high and low positions. <br />
            交换高低位
            </summary>
            <param name="bin"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.Helpers.ScaleConvHelper">
            <summary>
            Scale convert helper (internal)
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.Helpers.ScaleRevHelper">
            <summary>
            Scale rev helper (internal)
            </summary>
        </member>
        <member name="T:Cosmos.Conversions.Hex">
            <summary>
            Hex Utilities <br />
            十六进制工具
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.Hex.ToString(System.Byte[])">
            <summary>
            Byte array to hex string <br />
            将字节数组转换为十六进制字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Hex.ToBytes(System.String)">
            <summary>
            Hex string to byte <br />
            将十六进制字符串转换为字节数组
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.Hex.Reverse(System.String)">
            <summary>
            Reverse high and low positions. <br />
            高低位交换
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.HexExtensions">
            <summary>
            Hex extensions <br />
            十六进制工具扩展
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.HexExtensions.ToHexString(System.Byte[])">
            <summary>
            Byte array to hex string <br />
            将字节数组转换为十六进制字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.HexExtensions.ToBytes(System.String)">
            <summary>
            Hex string to byte <br />
            将十六进制字符串转换为字节数组
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Conversions.ScaleConv">
            <summary>
            Scale convert utilities <br />
            进制转换工具
            </summary>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            X-2-X convert entry.  <br />
            X 进制转换为 Y 进制，通用进制转换入口
            </summary>
            <param name="things"></param>
            <param name="baseOfSource"></param>
            <param name="baseOfTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.BinToDec(System.String)">
            <summary>
            Convert binary value to decimal value. <br />
            二进制值转换为十进制值
            </summary>
            <example>in: 101110; out: 46</example>
            <param name="binaryThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.BinToHex(System.String)">
            <summary>
            Convert binary value to hexadecimal value. <br />
            二进制值转换为十六进制值
            </summary>
            <example>in: 101110; out: 2E</example>
            <param name="binaryThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToBin(System.String)">
            <summary>
            Convert decimal value to binary value. <br />
            十进制值转换为二进制值
            </summary>
            <example>in: 46; out: 101110</example>
            <example>in: 128; out: 10000000</example>
            <param name="decimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToBin(System.Byte)">
            <summary>
            Convert decimal value to binary value. <br />
            十进制值转换为二进制值
            </summary>
            <example>in: 46; out: 101110</example>
            <example>in: 128; out: 10000000</example>
            <param name="decimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToHex(System.String)">
            <summary>
            Convert decimal value to hexadecimal value. <br />
            十进制值转换为十六进制值
            </summary>
            <example>in: 46; out: 2E</example>
            <param name="decimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToHex(System.String,System.Int32)">
            <summary>
            Convert decimal value to hexadecimal value. <br />
            十进制值转换为十六进制值
            </summary>
            <example>in: 46; out: 002E</example>
            <param name="decimalThings"></param>
            <param name="formatLength"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToHex(System.Byte)">
            <summary>
            Convert decimal value to hexadecimal value. <br />
            十进制值转换为十六进制值
            </summary>
            <example>in: 46; out: 2E</example>
            <param name="decimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecToHex(System.Byte,System.Byte)">
            <summary>
            Convert high address 'h' and low address 'l' decimal value to hexadecimal value. <br />
            十进制值转换为十六进制值
            </summary>
            <example>in: (byte)65, (byte)66; out: 4142</example>
            <example>in: (byte)66, (byte)65; out: 4241</example>
            <param name="highThings"></param>
            <param name="lowThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.HexToDec(System.String)">
            <summary>
            Convert hexadecimal value to decimal value. <br />
            十六进制值转换为十进制值
            </summary>
            <example>in: 2E; out: 46</example>
            <param name="hexadecimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.HexToBin(System.String)">
            <summary>
            Convert hexadecimal value to binary value. <br />
            十六进制值转换为二进制值
            </summary>
            <example>in: 2E; out: 101110</example>
            <param name="hexadecimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.LettersToHex(System.String,System.Text.Encoding)">
            <summary>
            Convert letters to hexadecimal value. <br />
            将字符转换为十六进制值
            </summary>
            <param name="letters"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.HexToLetters(System.String,System.Text.Encoding)">
            <summary>
            Convert hexadecimal value to letters. <br />
            将十六进制值转换为字符
            </summary>
            <param name="hexadecimalThings"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.LongHexToDecBytes(System.String)">
            <summary>
            Convert long hexadecimal value to decimal bytes value. <br />
            长十六进制字符串值转换为十进制 byte 值
            </summary>
            <example>in: 2E3D; out: result[0] is 46, result[1] is 61</example>
            <param name="hexadecimalThings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Conversions.ScaleConv.DecBytesToLongHex(System.Byte[])">
            <summary>
            Convert decimal bytes value to long hexadecimal value. <br />
            十进制 byte 值转换为长十六进制字符串值
            </summary>
            <example>in: new byte[] {65 , 66, 67}; out: 414243</example>
            <param name="decimalBytes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.CosmosException">
            <summary>
            Cosmos.Core base exception <br />
            异常基类
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.EMPTY_FLAG">
            <summary>
            Empty flag <br />
            空 标记位
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_ERROR_MESSAGE">
            <summary>
            Default error message for cosmos exception <br />
            默认错误信息
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_ERROR_CODE">
            <summary>
            Default error code for cosmos exception <br />
            默认错误编码
            </summary>
        </member>
        <member name="F:Cosmos.CosmosException.DEFAULT_EXTEND_ERROR_CODE">
            <summary>
            Default extend error code for cosmos exception <br />
            默认扩展错误编码
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.CosmosException.#ctor(Cosmos.Exceptions.ExceptionOptions)">
            <summary>
            Create a new cosmos exception instance. <br />
            创建一个新实例
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Cosmos.CosmosException.Code">
            <summary>
            Error code <br />
            错误编码
            </summary>
        </member>
        <member name="P:Cosmos.CosmosException.Flag">
            <summary>
            Error flag <br />
            错误标记位
            </summary>
        </member>
        <member name="P:Cosmos.CosmosException.ExtraData">
            <summary>
            Extra data <br />
            扩展数据
            </summary>
        </member>
        <member name="M:Cosmos.CosmosException.GetFullMessage">
            <summary>
            Get full message <br />
            获取完整的异常信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.CosmosException.Throw">
            <summary>
            Throw me. <br />
            抛出异常
            </summary>
        </member>
        <member name="T:Cosmos.Date.DateTimeOutputStyles">
            <summary>
            Datetime Output Styles <br />
            时间输出风格
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.LongDate">
            <summary>
            LongDate
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.LongTime">
            <summary>
            LongTime
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.ShortDate">
            <summary>
            ShortDate
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.ShortTime">
            <summary>
            ShortTime
            </summary>
        </member>
        <member name="F:Cosmos.Date.DateTimeOutputStyles.Millisecond">
            <summary>
            Millisecond
            </summary>
        </member>
        <member name="T:Cosmos.Date.DateTimeHelper">
            <summary>
            DateTime Helper (internal)
            </summary>
        </member>
        <member name="M:Cosmos.Date.DateTimeHelper.Ifttt(System.Boolean,System.String,System.String)">
            <summary>
            If this then that...
            </summary>
            <param name="condition"></param>
            <param name="format1"></param>
            <param name="format2"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Date.DateTimeToStringExtensions">
            <summary>
            DateTime to String extensions <br />
            DateTime 转换为 String 的扩展
            </summary>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToString(System.DateTime,Cosmos.Date.DateTimeOutputStyles,System.Boolean)">
            <summary>
            Convert DateTime value to String. <br />
            将 DateTime 转换为字符串。
            </summary>
            <param name="dt"></param>
            <param name="styles"></param>
            <param name="isRemoveSecond"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToString(System.Nullable{System.DateTime},Cosmos.Date.DateTimeOutputStyles,System.Boolean)">
            <summary>
            Convert DateTime value to String. <br />
            将 DateTime 转换为字符串。
            </summary>
            <param name="dt"></param>
            <param name="styles"></param>
            <param name="isRemoveSecond"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            Convert DateTime to DateTimeOffset. <br />
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Convert DateTime to  DateTimeOffset. <br />
            将时间转换为时间点
            </summary>
            <param name="localDateTime"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            Convert DateTimeOffset to DateTime. <br />
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.DateTimeToStringExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            Convert DateTimeOffset to DateTime. <br />
            将时间点转换为时间
            </summary>
            <param name="dateTimeUtc"></param>
            <param name="localTimeZone"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Date.TimeStamp">
            <summary>
            Timestamp <br />
            时间戳
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.m_timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.m_datetime">
            <summary>
            Datetime
            </summary>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor(System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.#ctor(System.DateTime)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.TimeStamp"/>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.ToDateTime">
            <summary>
            Get the corresponding time based on the timestamp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.TimeStamp.ToTimestamp">
            <summary>
            Get timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.NowTimeStamp">
            <summary>
            Gets a Func for now
            </summary>
        </member>
        <member name="F:Cosmos.Date.TimeStamp.UtcNowTimeStamp">
            <summary>
            Gets a Func for utc_now
            </summary>
        </member>
        <member name="T:Cosmos.Date.NoRepeatTimeStampFactory">
            <summary>
            No repeat TimeStamp factory <br />
            不重复时间戳工厂
            </summary>
        </member>
        <member name="P:Cosmos.Date.NoRepeatTimeStampFactory.IncrementMs">
            <summary>
            Increment milliseconds. <br />
            自增毫秒数
            </summary>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetTimeStamp">
            <summary>
            Gets timestamp <br />
            获得时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcTimeStamp">
            <summary>
            Gets timestamp <br />
            获得时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetTimeStampObject">
            <summary>
            Gets TimeStamp object <br />
            获得时间戳对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcTimeStampObject">
            <summary>
            Gets utc TimeStamp object <br />
            获得时间戳对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUnixTimeStampObject">
            <summary>
            Gets unix TimeStamp object <br />
            获得 Unix 时间戳对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.NoRepeatTimeStampFactory.GetUtcUnixTimeStampObject">
            <summary>
            Gets utc unix TimeStamp object <br />
            获得 UTC Unix 时间戳对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Date.UnixTimeStamp">
            <summary>
            Unix timestamp <br />
            Unix 时间戳
            </summary>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor(System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.#ctor(System.DateTime)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Date.UnixTimeStamp"/>
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.ToDateTime">
            <summary>
            根据 Unix 时间戳，获取对应时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Date.UnixTimeStamp.ToTimestamp">
            <summary>
            获取 Unix 时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Date.UnixTimeStamp.NowUnixTimeStamp">
            <summary>
            Gets a func for unix now.
            </summary>
        </member>
        <member name="F:Cosmos.Date.UnixTimeStamp.UtcNowUnixTimeStamp">
            <summary>
            Gets a func for unix utc_now.
            </summary>
        </member>
        <member name="T:Cosmos.Dynamic.Exposed">
            <summary>
            Exposes hidden (private/protected/internal) members of an
            <see langword="object"/> or <see cref="T:System.Type"/> through a <see langword="dynamic"/> wrapper.
            </summary>
        </member>
        <member name="F:Cosmos.Dynamic.Exposed._value">
            <summary>
            The <see langword="object"/> that is being exposed.
            <see langword="null"/> if static members of a <see cref="T:System.Type"/> are being exposed.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.Exposed"/> class.
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.Exposed"/> class.
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="P:Cosmos.Dynamic.Exposed.SubjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the exposed object.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.From(System.Object)">
            <summary>
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.From(System.Type)">
            <summary>
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.New(System.Type)">
            <summary>
            Creates a new wrapper for accessing members of a new instance of <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of which an instance will have it's members exposed.
            </param>
            <returns>
            A new wrapper around a new instance of <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.New``1">
            <summary>
            Creates a new wrapper for accessing members of a new instance of <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            A new wrapper around a new instance of <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.Exposed.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">
            The expression tree representation of the runtime value.
            </param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:Cosmos.Dynamic.MetaObject">
            <summary>
            Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.
            </summary>
        </member>
        <member name="F:Cosmos.Dynamic.MetaObject._isStatic">
            <summary>
            Should this <see cref="T:Cosmos.Dynamic.MetaObject"/> bind to <see langword="static"/> or instance methods and fields.
            </summary>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.#ctor(System.Linq.Expressions.Expression,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Dynamic.MetaObject"/> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"/> during the dynamic binding process.
            </param>
            <param name="value">
            The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/>.
            </param>
            <param name="staticBind">
            Should this MetaObject bind to <see langword="static"/> or instance methods and fields.
            </param>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="args">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - arguments to the invoke member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
            <exception cref="T:System.MissingMemberException">
            There is an attempt to dynamically access a class member that does not exist.
            </exception>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="value">
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.GetMemberExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Generates the <see cref="T:System.Linq.Expressions.Expression"/> for accessing a member by name.
            </summary>
            <param name="self">
            The <see cref="T:System.Linq.Expressions.Expression"/> for accessing the <see cref="T:Cosmos.Dynamic.Exposed"/> instance.
            </param>
            <param name="memberName">
            The member name.
            </param>
            <returns>
            <see cref="T:System.Linq.Expressions.MemberExpression"/> for accessing a member by name.
            </returns>
            <exception cref="T:System.MissingMemberException">
            </exception>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.ConvertExpressionType(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Coerces the expression type into the expected return type.
            </summary>
            <param name="expectedType">Type expeted at the dispatch site.</param>
            <param name="target">Expression to coerce.</param>
            <remarks>Dynamic dispatch expects a <see langword="void"/> method to return <see langword="null"/>.</remarks>
            <returns>Target expression coerced to the required type.</returns>
        </member>
        <member name="M:Cosmos.Dynamic.MetaObject.GetBindingFlags">
            <summary>
            Returns <see cref="T:System.Reflection.BindingFlags"/> for member search.
            </summary>
            <returns>
            Static or instance flags depending on <see cref="F:Cosmos.Dynamic.MetaObject._isStatic"/>.
            </returns>
        </member>
        <member name="T:Cosmos.EqualityHelper`1">
            <summary>
            相等比较，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper[Person].CreateComparer(p => p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p => p.Birthday.Year);
            </example>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            Create comparer <br />
            创建比较器
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create comparer <br />
            创建比较器
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionHelper">
            <summary>
            Exception helper <br />
            异常工具
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelper.PrepareForRethrow(System.Exception)">
            <summary>
            Prepare for rethrow <br />
            重新抛出异常
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelper.Unwrap(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelper.Unwrap(System.Exception,System.Type,System.Boolean)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <param name="untilType"></param>
            <param name="mayDerivedClass"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelper.Unwrap``1(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionHelperExtensions">
            <summary>
            Cosmos.Core <see cref="T:System.Exception"/> extensions. <br />
            异常工具扩展
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelperExtensions.Unwrap(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelperExtensions.Unwrap(System.Exception,System.Type,System.Boolean)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <param name="ex"></param>
            <param name="untilType"></param>
            <param name="mayDerivedClass"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelperExtensions.Unwrap``1(System.Exception)">
            <summary>
            Unwrap<br />
            解包
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelperExtensions.ToUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets message<br />
            解包并返回消息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionHelperExtensions.ToFullUnwrappedString(System.Exception)">
            <summary>
            Unwrap and gets full message<br />
            解包，尝试返回完整信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionOptions">
            <summary>
            Options for cosmos exception <br />
            异常选项
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.EMPTY_FLAG">
            <summary>
            Empty flag <br />
            空标识
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_ERROR_MESSAGE">
            <summary>
            Default error message <br />
            默认的异常信息
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_EXTEND_ERROR_CODE">
            <summary>
            Default extend error code <br />
            默认的扩展异常编号
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.Message">
            <summary>
            Gets for sets error message, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_ERROR_MESSAGE"/>. <br />
            异常信息
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.Flag">
            <summary>
            Gets or sets error flag, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.EMPTY_FLAG"/>. <br />
            标识
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.ErrorCode">
            <summary>
            Gets or sets error code, default is <see cref="F:Cosmos.Exceptions.ExceptionOptions.DEFAULT_EXTEND_ERROR_CODE"/>. <br />
            错误编号
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.InnerException">
            <summary>
            Gets or sets inner exception. <br />
            内部异常
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.ExceptionOptions.ExtraErrors">
            <summary>
            Gets or sets extra errors <br />
            获取或写入额外的错误信息
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.Try">
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
            <summary>
            Try <br />
            Try 组件
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``1(System.Func{``0},System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``2(System.Func{``0,``1},``0,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``3(System.Func{``0,``1,``2},``0,``1,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Create``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``1(System.Func{``0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``2(System.Func{``0,``1})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``3(System.Func{``0,``1,``2})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFromTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.Threading.CancellationToken)">
            <summary>
            Create for asynchronous functions. <br />
            为异步的 Function 创建一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="createFunctionAsync"></param>
            <param name="cause"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.CreateFuture``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            预备创建一个新的 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="createFunction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.LiftValue``1(``0)">
            <summary>
            Lifts a value. <br />
            直接使用一个值生成 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.LiftException``1(System.Exception,System.String)">
            <summary>
            Lifts <br />
            直接使用一个异常生成 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例
            </summary>
            <param name="ex"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke(System.Action,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``1(System.Action{``0},``0,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="obj"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``2(System.Action{``0,``1},``0,``1,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``3(System.Action{``0,``1,``2},``0,``1,``2,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Invoke``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future(System.Action)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``1(System.Action{``0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``2(System.Action{``0,``1})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``3(System.Action{``0,``1,``2})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},System.Func{System.Int32,``1},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``3(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``4(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``5(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``6(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``7(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``8(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``9(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``10(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``11(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``12(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``13(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``14(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``15(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.Func{System.Int32,``14},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="arg15Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeRange``16(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.Func{System.Int32,``14},System.Func{System.Int32,``15},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="arg15Func"></param>
            <param name="arg16Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync(System.Threading.Tasks.Task{System.Action},System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``1(System.Threading.Tasks.Task{System.Action{``0}},``0,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="obj"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``2(System.Threading.Tasks.Task{System.Action{``0,``1}},``0,``1,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``3(System.Threading.Tasks.Task{System.Action{``0,``1,``2}},``0,``1,``2,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``4(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3}},``0,``1,``2,``3,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``5(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``6(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5}},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``7(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6}},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``8(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``9(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``10(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``11(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``12(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``13(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``14(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``15(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.InvokeAsync``16(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="InvokeAsyncAction"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future(System.Threading.Tasks.Task{System.Action})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``1(System.Threading.Tasks.Task{System.Action{``0}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``2(System.Threading.Tasks.Task{System.Action{``0,``1}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``3(System.Threading.Tasks.Task{System.Action{``0,``1,``2}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``4(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``5(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``6(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``7(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``8(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``9(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``10(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``11(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``12(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``13(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``14(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``15(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try.Future``16(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="invokeAction"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.TryAction">
            <summary>
            Try action <br />
            Try Action 组件
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.TryAction.IsFailure">
            <summary>
            Is failure <br />
            标记是否为失败
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.TryAction.IsSuccess">
            <summary>
            Is success <br />
            标记是否为成功
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.TryAction.Exception">
            <summary>
            Exception <br />
            异常
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.TryAction.Cause">
            <summary>
            Cause <br />
            发生异常的原因
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.op_Equality(Cosmos.Exceptions.TryAction,Cosmos.Exceptions.TryAction)">
            <summary>
            ==
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.op_Inequality(Cosmos.Exceptions.TryAction,Cosmos.Exceptions.TryAction)">
            <summary>
            !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.Deconstruct(System.Boolean@,Cosmos.Exceptions.TryInvokingException@)">
            <summary>
            Deconstruct
            </summary>
            <param name="tryResult"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.ExceptionAs``1">
            <summary>
            Exception as
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.Recover(System.Action{System.Exception})">
            <summary>
            Recover
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.TryAction})">
            <summary>
            Recover with
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryAction.Tap(System.Action,System.Action{System.Exception})">
            <summary>
            Tap
            </summary>
            <param name="successFunction"></param>
            <param name="failureFunction"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.FailureAction">
            <summary>
            Failure Action <br />
            失败的 Try Action 组件
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Exceptions.FailureAction"/> class.
            </summary>
            <param name="exception">The exception to wrap.</param>
            <param name="hashOfAction"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Cosmos.Exceptions.FailureAction.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.FailureAction.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.FailureAction.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.FailureAction.Cause">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.Equals(Cosmos.Exceptions.FailureAction)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.Recover(System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.TryAction})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.FailureAction.Tap(System.Action,System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Exceptions.SuccessAction">
            <summary>
            Success Action <br />
            成功的 Try Action 组件
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Exceptions.SuccessAction"/> class.
            </summary>
            <param name="hashOfAction"></param>
        </member>
        <member name="P:Cosmos.Exceptions.SuccessAction.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.SuccessAction.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.SuccessAction.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.SuccessAction.Cause">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.Equals(Cosmos.Exceptions.SuccessAction)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.Recover(System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.RecoverWith(System.Func{System.Exception,Cosmos.Exceptions.TryAction})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.SuccessAction.Tap(System.Action,System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Exceptions.TryCreatingBuilderBase2`1">
            <summary>
            Creating builder for Try Component <br />
            创建 Try 组件的构建器
            </summary>
            <typeparam name="TEndingBuilder"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`1">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`2">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`3">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`4">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`5">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`6">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`7">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`8">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`9">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`10">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`11">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`12">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`13">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`14">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`15">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`16">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder2`17">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.TryCreatingBuilderBase`1">
            <summary>
            Creating builder for Try Component <br />
            创建 Try 组件的构建器
            </summary>
            <typeparam name="TEndingBuilder"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`1">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`2">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`3">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`4">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`5">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`6">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`7">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`8">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`9">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`10">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`11">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`12">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`13">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`14">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`15">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`16">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureCreatingBuilder`17">
            <summary>
            Creating builder for Future Try Component <br />
            预备创建 Try 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.TryCreatingValueException">
            <summary>
            Creating value exception for Try <br />
            尝试组件的异常封装
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.TryCreatingValueException.#ctor(System.Exception,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryCreatingValueException.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="flag"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryCreatingValueException.#ctor(System.Exception,System.String,System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryCreatingValueException.#ctor(System.Exception,System.String,System.String,System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="flag"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryCreatingValueException.#ctor(Cosmos.CosmosException,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryCreatingValueException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Cosmos.Exceptions.TryCreatingValueException.Cause">
            <summary>
            Cause <br />
            导致异常的原因
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.TryExtensions">
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
            <summary>
            Try extensions. <br />
            Try 组件扩展
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke(System.Action,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``1(System.Action{``0},``0,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``3(System.Action{``0,``1,``2},``0,``1,``2,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvoke``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke(System.Action)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``1(System.Action{``0})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``2(System.Action{``0,``1})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``3(System.Action{``0,``1,``2})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync(System.Threading.Tasks.Task{System.Action},System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``1(System.Threading.Tasks.Task{System.Action{``0}},``0,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``2(System.Threading.Tasks.Task{System.Action{``0,``1}},``0,``1,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``3(System.Threading.Tasks.Task{System.Action{``0,``1,``2}},``0,``1,``2,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``4(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3}},``0,``1,``2,``3,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``5(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``6(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5}},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``7(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6}},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``8(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``9(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``10(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``11(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``12(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``13(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``14(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``15(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryInvokeAsync``16(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke(System.Threading.Tasks.Task{System.Action})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``1(System.Threading.Tasks.Task{System.Action{``0}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``2(System.Threading.Tasks.Task{System.Action{``0,``1}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``3(System.Threading.Tasks.Task{System.Action{``0,``1,``2}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``4(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``5(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``6(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``7(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``8(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``9(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``10(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``11(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``12(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``13(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``14(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``15(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFutureInvoke``16(System.Threading.Tasks.Task{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.TryAction"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="action"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.Select``2(Cosmos.Exceptions.Try{``0},System.Func{``0,``1})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.SelectMany``2(Cosmos.Exceptions.Try{``0},System.Func{``0,Cosmos.Exceptions.Try{``1}})">
            <summary>
            Select many <br />
            选择
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.SelectMany``3(Cosmos.Exceptions.Try{``0},System.Func{``0,Cosmos.Exceptions.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            Select many <br />
            选择
            </summary>
            <param name="source"></param>
            <param name="convert"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TIntermediate"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.Where``1(Cosmos.Exceptions.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where <br />
            条件筛选
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``1(System.Func{``0},System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="cause"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``2(System.Func{``0,``1},``0,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``3(System.Func{``0,``1,``2},``0,``1,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvoke``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``1(System.Func{``0})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``2(System.Func{``0,``1})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``3(System.Func{``0,``1,``2})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="cause"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncInvokeAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.String)">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/>. <br />
            尝试调用委托，返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <param name="arg9"></param>
            <param name="arg10"></param>
            <param name="arg11"></param>
            <param name="arg12"></param>
            <param name="arg13"></param>
            <param name="arg14"></param>
            <param name="arg15"></param>
            <param name="arg16"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.TryFuncFutureInvoke``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}})">
            <summary>
            Try to invoke and create a new instance of <see cref="T:Cosmos.Exceptions.Try`1"/> in the future. <br />
            尝试调用委托，预备返回一个 <see cref="T:Cosmos.Exceptions.Try`1"/> 实例。
            </summary>
            <param name="func"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="cause"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},System.Func{System.Int32,``1},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``3(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``4(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``5(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``6(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``7(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``8(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``9(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``10(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``11(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``12(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``13(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``14(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``15(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.Func{System.Int32,``14},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="arg15Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.TryExtensions.ToTryInvokeRange``16(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{System.Int32,``1},System.Func{System.Int32,``2},System.Func{System.Int32,``3},System.Func{System.Int32,``4},System.Func{System.Int32,``5},System.Func{System.Int32,``6},System.Func{System.Int32,``7},System.Func{System.Int32,``8},System.Func{System.Int32,``9},System.Func{System.Int32,``10},System.Func{System.Int32,``11},System.Func{System.Int32,``12},System.Func{System.Int32,``13},System.Func{System.Int32,``14},System.Func{System.Int32,``15},System.String)">
            <summary>
            Create a set of instance of <see cref="T:Cosmos.Exceptions.TryAction"/>. <br />
            尝试调用委托，预备返回一组 <see cref="T:Cosmos.Exceptions.TryAction"/> 实例。
            </summary>
            <param name="coll"></param>
            <param name="invokeAction"></param>
            <param name="arg2Func"></param>
            <param name="arg3Func"></param>
            <param name="arg4Func"></param>
            <param name="arg5Func"></param>
            <param name="arg6Func"></param>
            <param name="arg7Func"></param>
            <param name="arg8Func"></param>
            <param name="arg9Func"></param>
            <param name="arg10Func"></param>
            <param name="arg11Func"></param>
            <param name="arg12Func"></param>
            <param name="arg13Func"></param>
            <param name="arg14Func"></param>
            <param name="arg15Func"></param>
            <param name="arg16Func"></param>
            <param name="cause"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilderBase2`1">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="TEndingBuilder"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`1">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`2">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`3">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`4">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`5">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`6">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`7">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`8">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`9">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`10">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`11">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`12">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`13">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`14">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`15">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder2`16">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilderBase`1">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="TEndingBuilder"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`1">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`2">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`3">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`4">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`5">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`6">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`7">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`8">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`9">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`10">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`11">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`12">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`13">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`14">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`15">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.FutureInvokingBuilder`16">
            <summary>
            Creating builder for Try Action Component <br />
            创建 Try Action 组件的构建器
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
        </member>
        <member name="T:Cosmos.Exceptions.TryInvokingException">
            <summary>
            Try-invoking exception <br />
            尝试调用异常
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.TryInvokingException.#ctor(System.Exception,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryInvokingException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryInvokingException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryInvokingException.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryInvokingException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryInvokingException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="flag"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryInvokingException.#ctor(System.Exception,System.String,System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryInvokingException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryInvokingException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryInvokingException.#ctor(System.Exception,System.String,System.String,System.Int64)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryInvokingException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryInvokingException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
            <param name="flag"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Cosmos.Exceptions.TryInvokingException.#ctor(Cosmos.CosmosException,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.TryInvokingException"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.TryInvokingException"/> 实例。
            </summary>
            <param name="exception"></param>
            <param name="cause"></param>
        </member>
        <member name="P:Cosmos.Exceptions.TryInvokingException.Cause">
            <summary>
            Cause <br />
            导致异常的原因
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.Try`1">
            <summary>
            Try <br />
            尝试
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.IsFailure">
            <summary>
            Is failure <br />
            标记是否为失败
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.IsSuccess">
            <summary>
            Is success <br />
            标记是否为成功
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.Exception">
            <summary>
            Exception <br />
            异常
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.Try`1.Value">
            <summary>
            Value <br />
            值
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValue">
            <summary>
            Gets value <br />
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValueAsync">
            <summary>
            Get value async <br />
            异步获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue">
            <summary>
            Get safe value <br />
            安全获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(`0)">
            <summary>
            Get safe value <br />
            安全获取值
            </summary>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(System.Func{`0})">
            <summary>
            Get safe value <br />
            安全获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Get safe value <br />
            安全获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValue(System.Func{System.Exception,System.String,`0})">
            <summary>
            Get safe value <br />
            安全获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(`0)">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{`0})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Exception,System.String,`0})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{Cosmos.Exceptions.TryCreatingValueException,System.Threading.Tasks.Task{`0}})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueAsync(System.Func{System.Exception,System.String,System.Threading.Tasks.Task{`0}})">
            <summary>
            Get safe value async <br />
            安全异步获取值
            </summary>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@)">
            <summary>
            Try get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,`0)">
            <summary>
            Try get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,System.Func{`0})">
            <summary>
            Try get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Try get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.TryGetValue(`0@,System.Func{System.Exception,System.String,`0})">
            <summary>
            Try get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValueOut(`0@)">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetValueOutAsync(System.Threading.Tasks.Task{`0}@)">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOut(`0@)">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOut(`0@,`0)">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOut(`0@,System.Func{`0})">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOut(`0@,System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOut(`0@,System.Func{System.Exception,System.String,`0})">
            <summary>
            Try to get value <br />
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@)">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,`0)">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{`0})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{System.Exception,System.String,`0})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{Cosmos.Exceptions.TryCreatingValueException,System.Threading.Tasks.Task{`0}})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetSafeValueOutAsync(System.Threading.Tasks.Task{`0}@,System.Func{System.Exception,System.String,System.Threading.Tasks.Task{`0}})">
            <summary>
            Try to get value async <br />
            尝试异步获取值
            </summary>
            <param name="value"></param>
            <param name="defaultValAsyncFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.op_Equality(Cosmos.Exceptions.Try{`0},Cosmos.Exceptions.Try{`0})">
            <summary>
            ==
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.op_Inequality(Cosmos.Exceptions.Try{`0},Cosmos.Exceptions.Try{`0})">
            <summary>
            !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Deconstruct(`0@,System.Exception@)">
            <summary>
            Deconstruct
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Deconstruct(`0@,System.Boolean@,System.Exception@)">
            <summary>
            Deconstruct
            </summary>
            <param name="value"></param>
            <param name="tryResult"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.ExceptionAs``1">
            <summary>
            Exception as
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Recover(System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <summary>
            Recover
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Recover(System.Func{System.Exception,System.String,`0})">
            <summary>
            Recover
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.RecoverWith(System.Func{Cosmos.Exceptions.TryCreatingValueException,Cosmos.Exceptions.Try{`0}})">
            <summary>
            Recover with
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.RecoverWith(System.Func{System.Exception,System.String,Cosmos.Exceptions.Try{`0}})">
            <summary>
            Recover with
            </summary>
            <param name="recoverFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Match``1(System.Func{`0,``0},System.Func{Cosmos.Exceptions.TryCreatingValueException,``0})">
            <summary>
            Match
            </summary>
            <param name="whenValue"></param>
            <param name="whenException"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,System.String,``0})">
            <summary>
            Match
            </summary>
            <param name="whenValue"></param>
            <param name="whenException"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map
            </summary>
            <param name="map"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Tap(System.Action{`0},System.Action{Cosmos.Exceptions.TryCreatingValueException})">
            <summary>
            Tap
            </summary>
            <param name="successFunction"></param>
            <param name="failureFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Tap(System.Action{`0},System.Action{System.Exception,System.String})">
            <summary>
            Tap
            </summary>
            <param name="successFunction"></param>
            <param name="failureFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Try`1.Bind``1(System.Func{`0,Cosmos.Exceptions.Try{``0}})">
            <summary>
            Bind
            </summary>
            <param name="bind"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.Failure`1">
            <summary>
            Failure <br />
            失败的 Try 组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Exceptions.Failure`1"/> class.
            </summary>
            <param name="exception">The exception to wrap.</param>
            <param name="cause"></param>
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Failure`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Equals(Cosmos.Exceptions.Failure{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Recover(System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Recover(System.Func{System.Exception,System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.RecoverWith(System.Func{Cosmos.Exceptions.TryCreatingValueException,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.RecoverWith(System.Func{System.Exception,System.String,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Match``1(System.Func{`0,``0},System.Func{Cosmos.Exceptions.TryCreatingValueException,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,System.String,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Tap(System.Action{`0},System.Action{Cosmos.Exceptions.TryCreatingValueException})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Failure`1.Tap(System.Action{`0},System.Action{System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Exceptions.Success`1">
            <summary>
            Success <br />
            成功的 Try 组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cosmos.Exceptions.Success`1"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.IsFailure">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.Exception">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.Exceptions.Success`1.Value">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Equals(Cosmos.Exceptions.Success{`0})">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Deconstruct(`0@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Recover(System.Func{Cosmos.Exceptions.TryCreatingValueException,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Recover(System.Func{System.Exception,System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.RecoverWith(System.Func{Cosmos.Exceptions.TryCreatingValueException,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.RecoverWith(System.Func{System.Exception,System.String,Cosmos.Exceptions.Try{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Match``1(System.Func{`0,``0},System.Func{Cosmos.Exceptions.TryCreatingValueException,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Match``1(System.Func{`0,``0},System.Func{System.Exception,System.String,``0})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Tap(System.Action{`0},System.Action{Cosmos.Exceptions.TryCreatingValueException})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Exceptions.Success`1.Tap(System.Action{`0},System.Action{System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.Expressions.ExpressionExtensions">
            <summary>
            public <see cref="T:System.Linq.Expressions.Expression"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyExpression(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Expressions.ExpressionExtensions.CreateGetPropertyLambdaExpression``2(System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create get property lambda expression
            </summary>
            <param name="propertyInfo"></param>
            <param name="parameterExpression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.Expressions.LambdaExtensions">
            <summary>
            Lambda extensions
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Operation(System.Linq.Expressions.Expression,Cosmos.Queries.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Cosmos.Expressions.LambdaExtensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="T:Cosmos.Expressions.Lambdas">
            <summary>
            Lambda Utils<br />
            Lambda 工具集
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式,范例1：t => t.Name == "A" ，结果1。
            范例2：t => t.Name == "A" &amp;&amp; t.Age =1 ，结果2。</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Constant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            获取常量表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.CreateParameter``1">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Starts``1(System.String,System.String)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Ends``1(System.String,System.String)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.Lambdas.ParsePredicate``1(System.String,System.Object,Cosmos.Queries.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:Cosmos.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Cosmos.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:Cosmos.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化谓词表达式生成器
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Cosmos.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.Append(System.String,Cosmos.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Cosmos.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:Cosmos.Finders.BaseFinder`1">
            <summary>
            Base finder <br />
            Finder 基类
            </summary>
        </member>
        <member name="F:Cosmos.Finders.BaseFinder`1.ItemsCache">
            <summary>
            Cached items. <br />
            已缓存的项目
            </summary>
        </member>
        <member name="F:Cosmos.Finders.BaseFinder`1.Found">
            <summary>
            Mark whether the search has been completed.<br />
            标记是否已完成查找。
            </summary>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.BaseFinder`1.FindAllItems">
            <summary>
            Perform search work for all items. <br />
            执行所有项目的查找工作。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Finders.IFinder`1">
            <summary>
            Interface for finder <br />
            Finder 接口
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Cosmos.Finders.IFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Find items based on specified conditions. <br />
            根据指定的条件查找项目。
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.IFinder`1.FindAll(System.Boolean)">
            <summary>
            Find all items. <br />
            查找所有项目。
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IdUtils.StringIdentifiers">
            <summary>
            Identifier tool in string format <br />
            字符串格式的标识符工具
            </summary>
        </member>
        <member name="M:Cosmos.IdUtils.StringIdentifiers.ToValidIdentifier(System.String)">
            <summary>
            To valid identifier <br />
            转换为合法的标识符
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.InterlockedUtil">
            <summary>
            Interlocked Util <br />
            Interlocked 工具
            </summary>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read(System.Int32@)">
            <summary>
            Read <br />
            读取
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.InterlockedUtil.Read``1(``0@)">
            <summary>
            Read <br />
            读取
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitReader">
            <summary>
            Bit Reader <br />
            字节读取
            </summary>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt16(System.Span{System.Byte})">
            <summary>
            Read Int16 <br />
            读取 Int16
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt16(System.Span{System.Byte})">
            <summary>
            Read UInt16 <br />
            读取 UInt16
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt32(System.Span{System.Byte})">
            <summary>
            Read Int32 <br />
            读取 Int32
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt32(System.Span{System.Byte})">
            <summary>
            Read UInt32 <br />
            读取 UInt32
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt64(System.Span{System.Byte})">
            <summary>
            Read Int64 <br />
            读取 Int64
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt64(System.Span{System.Byte})">
            <summary>
            Read UInt64 <br />
            读取 UInt64
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Read Int16 <br />
            读取 Int16
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Read UInt16 <br />
            读取 UInt16
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Read Int32 <br />
            读取 Int32
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
            Read UInt32 <br />
            读取 UInt32
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadInt64(System.Byte[],System.Int32)">
            <summary>
            Read Int64 <br />
            读取 Int64
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitReader.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
            Read UInt64 <br />
            读取 UInt64
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitSwapper">
            <summary>
            Bit Swapper <br />
            字节交换
            </summary>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapInt16(System.Int16)">
            <summary>
            Exchange the value of 8 bits before and after Int16 <br />
            交换 Int16 前后 8 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapUInt16(System.UInt16)">
            <summary>
            Exchange the value of 8 bits before and after UInt16 <br />
            交换 UInt16 前后 8 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapInt32(System.Int32)">
            <summary>
            Exchange the value of 16 bits before and after Int32 <br />
            交换 Int32 前后 16 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapUInt32(System.UInt32)">
            <summary>
            Exchange the value of 16 bits before and after UInt32 <br />
            交换 UInt32 前后 16 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapInt64(System.Int64)">
            <summary>
            Exchange the value of 32 bits before and after Int64 <br />
            交换 Int64 前后 32 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitSwapper.SwapUInt64(System.UInt64)">
            <summary>
            Exchange the value of 32 bits before and after UInt64 <br />
            交换 UInt64 前后 32 位的值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IO.Buffers.BinaryDigitWriter">
            <summary>
            Bit Writer <br />
            字节写入
            </summary>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.Int16)">
            <summary>
            Write Int16 value <br />
            写入 Int16 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.UInt16)">
            <summary>
            Write UInt16 value <br />
            写入 UInt16 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.Int32)">
            <summary>
            Write Int32 value <br />
            写入 Int32 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.UInt32)">
            <summary>
            Write UInt32 value <br />
            写入 UInt32 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.Int64)">
            <summary>
            Write Int64 value <br />
            写入 Int64 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Span{System.Byte},System.UInt64)">
            <summary>
            Write Uint64 value <br />
            写入 UInt64 值
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Write Int16 value <br />
            写入 Int16 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Write UInt16 value <br />
            写入 UInt16 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write Int32 value <br />
            写入 Int32 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Write UInt32 value <br />
            写入 UInt32 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Write Int64 value <br />
            写入 Int64 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.IO.Buffers.BinaryDigitWriter.Write(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Write UInt64 value <br />
            写入 UInt64 值
            </summary>
            <param name="buffer"></param>
            <param name="position"></param>
            <param name="value"></param>
        </member>
        <member name="T:Cosmos.IO.FileHelper">
            <summary>
            File helper <br />
            文件工具
            </summary>
        </member>
        <member name="M:Cosmos.IO.FileHelper.Read(System.String)">
            <summary>
            Read <br />
            读取
            </summary>
            <param name="targetFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.FileHelper.ReadAsync(System.String)">
            <summary>
            Read async <br />
            异步读取
            </summary>
            <param name="targetFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.FileHelper.Read(System.Byte[],System.String,System.Boolean)">
            <summary>
            Read <br />
            读取
            </summary>
            <param name="byteArray"></param>
            <param name="targetFilePath"></param>
            <param name="appendMode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.FileHelper.ReadAsync(System.Byte[],System.String,System.Boolean)">
            <summary>
            Read async <br />
            异步读取
            </summary>
            <param name="byteArray"></param>
            <param name="targetFilePath"></param>
            <param name="appendMode"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.IO.StreamExtensions">
            <summary>
            Cosmos.Core <see cref="T:System.IO.Stream"/> extensions. <br />
            流扩展
            </summary>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TrySeek(System.IO.Stream,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Try seek <br />
            尝试根据给定的偏移量定位
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Read all bytes <br />
            读取所有字节
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Try read <br />
            尝试读取
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Try read async <br />
            尝试异步读取
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryReadByte(System.IO.Stream)">
            <summary>
            Try read byte <br />
            尝试读取字节
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TrySetReadTimeout(System.IO.Stream,System.Int32)">
            <summary>
            Try set read timeout <br />
            尝试为读取设置超时时间
            </summary>
            <param name="stream"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TrySetReadTimeout(System.IO.Stream,System.TimeSpan)">
            <summary>
            Try set read timeout <br />
            尝试为读取设置超时时间
            </summary>
            <param name="stream"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Try write <br />
            尝试写入
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryWriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Try write async <br />
            尝试异步写入
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TryWriteByte(System.IO.Stream,System.Byte)">
            <summary>
            Try write byte <br />
            尝试写入字节
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TrySetWriteTimeout(System.IO.Stream,System.Int32)">
            <summary>
            Try set write timeout <br />
            尝试为写入设置超时时间
            </summary>
            <param name="stream"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.IO.StreamExtensions.TrySetWriteTimeout(System.IO.Stream,System.TimeSpan)">
            <summary>
            Try set write timeout <br />
            尝试为写入设置超时时间
            </summary>
            <param name="stream"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Numeric.NumericMayOptions">
            <summary>
            Numerical speculative options <br />
            数值可推测性选项
            </summary>
        </member>
        <member name="T:Cosmos.Numeric.Numbers">
            <summary>
            Number Utilities <br />
            数值工具
            </summary>
            <summary>
            Number Utilities <br />
            数值工具
            </summary>
            <summary>
            Number Utilities <br />
            数值工具
            </summary>
            <summary>
            Number Utilities <br />
            数值工具
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetRangeBetween(System.Int32,System.Int32)">
            <summary>
            Get members between min value and max value (include min and max). <br />
            获取最小值和最大值之间的成员（包括最小值和最大值）。
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetRangeBetween(System.Int64,System.Int64)">
            <summary>
            Get members between min value and max value (include min and max). <br />
            获取最小值和最大值之间的成员（包括最小值和最大值）。
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.FixZero(System.Double)">
            <summary>
            Shortcut for returning true zero if a double tolerance floating point value is considered zero (within epsilon tolerance).<br />
            如果将双公差浮点值视为零（在ε公差内），则返回真零的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetDecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places before last zero digit.<br />
            返回最后零位之前的小数位数。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetSumAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetProductAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.GetSumUsingIntegers(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by using integer math.<br />
            通过使用整数数学来确保加法公差。
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNaN(System.Double)">
            <summary>
            Is NaN <br />
            标记是否为非数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNaN(System.Single)">
            <summary>
            Is NaN <br />
            标记是否为非数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsDefaultValue(System.Double)">
            <summary>
            Is default <br />
            标记是否为默认值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsZeroValue(System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is considered zero (within epsilon tolerance). <br />
            如果浮点值被视为零（在 Epsilon 容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsZeroValue(System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within epsilon tolerance). <br />
            如果双容差浮点值被视为零（在 Epsilon 容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearZeroValue(System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within provided tolerance). <br />
            如果双容差浮点值被视为零（在提供的容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证浮点值是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Double,System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double precision floating point value is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证双精度浮点值是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证一个十进制 addValue 是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsRelativeNearEqual(System.Double,System.Double,System.UInt32)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证一个十进制 addValue 是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Double,System.Double,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Single,System.Single,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsPreciseEqual(System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.IsNearEqual(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Shortcut for validating a if a potential floating point value is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证潜在浮点值是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDecimal(System.Single)">
            <summary>
            Accurate way to convert float to decimal by converting to string first.  Avoids tolerance issues.<br />
            通过先转换为字符串将浮点数转换为小数的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Single,System.Int32)">
            <summary>
            Accurate way to convert float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别来将 float 转换为 double 的准确方法。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Single)">
            <summary>
            Accurate way to convert float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串将 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Nullable{System.Single})">
            <summary>
            Accurate way to convert possible float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串来将可能的 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.Numbers.ToDouble(System.Nullable{System.Single},System.Int32)">
            <summary>
            Accurate way to convert a possible float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别，将可能的浮点数转换为双精度值的准确方法。
            </summary>
        </member>
        <member name="T:Cosmos.Numeric.NumberExtensions">
            <summary>
            Extensions for number utilities <br />
            数值工具扩展
            </summary>
            <summary>
            Extensions for number utilities <br />
            数值工具扩展
            </summary>
            <summary>
            Extensions for number utilities <br />
            数值工具扩展
            </summary>
            <summary>
            Extensions for number utilities <br />
            数值工具扩展
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.FixZero(System.Double)">
            <summary>
            Shortcut for returning true zero if a double tolerance floating point value is considered zero (within epsilon tolerance).<br />
            如果将双公差浮点值视为零（在ε公差内），则返回真零的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.DecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places before last zero digit.<br />
            返回最后零位之前的小数位数。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.SumAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ProductAccurate(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by trimming off unexpected imprecision.<br />
            通过消除意外的不准确性来确保附加公差。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.SumUsingIntegers(System.Double,System.Double)">
            <summary>
            Ensures addition tolerance by using integer math.<br />
            通过使用整数数学来确保加法公差。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsDefault(System.Double)">
            <summary>
            Is default <br />
            标记是否为默认值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsZero(System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is considered zero (within epsilon tolerance). <br />
            如果双容差浮点值被视为零（在提供的容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsZero(System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within epsilon tolerance). <br />
            如果双容差浮点值被视为零（在提供的容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearZero(System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double tolerance floating point value is considered zero (within provided tolerance). <br />
            如果双容差浮点值被视为零（在提供的容差内），则验证 a 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Single,System.Single,System.Single)">
            <summary>
            Shortcut for validating a if a floating point value is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证浮点值是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Double,System.Double,System.Double)">
            <summary>
            Shortcut for validating a if a double precision floating point value is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证双精度浮点值是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsNearEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证一个十进制 addValue 是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsRelativeNearEqual(System.Double,System.Double,System.UInt32)">
            <summary>
            Shortcut for validating a if a decimal addValue is close enough to another addValue using the given tolerance tolerance. <br />
            使用给定的容差来验证一个十进制 addValue 是否足够接近另一个 addValue 的快捷方式。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Double,System.Double,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Single,System.Single,System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.IsPreciseEqual(System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Validates if values are equal within epsilon tolerance. <br />
            验证值是否在 epsilon 容差内相等。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDecimal(System.Single)">
            <summary>
            Accurate way to convert float to decimal by converting to string first.  Avoids tolerance issues.<br />
            通过先转换为字符串将浮点数转换为小数的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Single,System.Int32)">
            <summary>
            Accurate way to convert float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别来将 float 转换为 double 的准确方法。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Single)">
            <summary>
            Accurate way to convert float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串将 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Nullable{System.Single})">
            <summary>
            Accurate way to convert possible float to double by converting to string first.  Avoids tolerance issues.<br />
            通过首先转换为字符串来将可能的 float 转换为 double 的准确方法。 避免公差问题。
            </summary>
        </member>
        <member name="M:Cosmos.Numeric.NumberExtensions.ToDouble(System.Nullable{System.Single},System.Int32)">
            <summary>
            Accurate way to convert a possible float to double by rounding finite values to a decimal point tolerance level.<br />
            通过将有限值四舍五入到小数点公差级别，将可能的浮点数转换为双精度值的准确方法。
            </summary>
        </member>
        <member name="T:Cosmos.Numeric.NumericConstants">
            <summary>
            Number constants <br />
            数值常量
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.ZERO">
            <summary>
            Zero <br />
            零
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.ONE">
            <summary>
            One <br />
            一
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.INT_MAX">
            <summary>
            Max value of Int32. <br />
            Int32 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.INT_MIN">
            <summary>
            Min value of Int32. <br />
            Int32 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.LONG_MAX">
            <summary>
            Max value of Int64. <br />
            Int64 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.LONG_MIN">
            <summary>
            Min value of Int64. <br />
            Int64 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.FLOAT_MAX">
            <summary>
            Max value of float. <br />
            Float 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.FLOAT_MIN">
            <summary>
            Min value of float. <br />
            Float 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DOUBLE_MAX">
            <summary>
            Max value of double. <br />
            Double 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DOUBLE_MIN">
            <summary>
            Min value of double. <br />
            Double 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DECIMAL_MAX">
            <summary>
            Max value of decimal. <br />
            Decimal 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.DECIMAL_MIN">
            <summary>
            Min value of decimal. <br />
            Decimal 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.SHORT_MAX">
            <summary>
            Max value of short. <br />
            Int16 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.SHORT_MIN">
            <summary>
            Min value of short. <br />
            Int16 的最小值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.USHORT_MAX">
            <summary>
            Max value of ushort. <br />
            UInt16 的最大值
            </summary>
        </member>
        <member name="F:Cosmos.Numeric.NumericConstants.USHORT_MIN">
            <summary>
            Min value of ushort. <br />
            UInt16 的最小值
            </summary>
        </member>
        <member name="T:Cosmos.ObjectExtensions">
            <summary>
            Object extensions <br />
            对象扩展
            </summary>
        </member>
        <member name="M:Cosmos.ObjectExtensions.As``1(System.Object)">
            <summary>
            As <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOr``1(System.Object,``0)">
            <summary>
            As or... <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或给定的默认值
            </summary>
            <param name="this"></param>
            <param name="defaultVal"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object)">
            <summary>
            As or default <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,``0)">
            <summary>
            As or default <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或给定的默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
            As or default <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或根据给定的默认值工厂方法获得默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            As or default <br />
            将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或根据给定的默认值工厂方法获得默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAs``1(System.Object,``0@)">
            <summary>
            Try as <br />
            尝试将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/>
            </summary>
            <param name="this"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOr``1(System.Object,``0,``0@)">
            <summary>
            Try as or <br />
            尝试将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或给定的默认值
            </summary>
            <param name="this"></param>
            <param name="defaultVal"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,``0,``0@)">
            <summary>
            Try as or default <br />
            尝试将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或给定的默认值
            </summary>
            <param name="this"></param>
            <param name="defaultValue"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,System.Func{``0},``0@)">
            <summary>
            Try as or default <br />
            尝试将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或根据给定的默认值工厂方法获得默认值
            </summary>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.TryAsOrDefault``1(System.Object,System.Func{System.Object,``0},``0@)">
            <summary>
            Try as or default <br />
            尝试将 <see cref="T:System.Object"/> 转换为 <typeparamref name="T"/> 或根据给定的默认值工厂方法获得默认值
            </summary>
            <param name="this"></param>
            <param name="defaultValueFactory"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Byte,System.Byte[])">
            <summary>
            Is On
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn(System.Int16,System.Int16[])">
            <summary>
            Is On <br />
            判断对象是否存在于给定的 <paramref name="list"/> 内
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,``0[])">
            <summary>
            Is On <br />
            判断对象是否存在于给定的 <paramref name="list"/> 内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is On <br />
            判断对象是否存在于给定的 <paramref name="list"/> 内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOn``1(``0,System.Collections.Generic.HashSet{``0})">
            <summary>
            Is On <br />
            判断对象是否存在于给定的 <paramref name="list"/> 内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ObjectExtensions.IsOnIgnoreCase(System.String,System.String[])">
            <summary>
            Is On and ignore case <br />
            判断字符串是否存在于给定的列表内（或略大小写）
            </summary>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Queries.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Equal">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.NotEqual">
            <summary>
            NotEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Greater">
            <summary>
            Greater
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.GreaterEqual">
            <summary>
            GreaterEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Less">
            <summary>
            Less
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.LessEqual">
            <summary>
            LessEqual
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Starts">
            <summary>
            Starts
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Ends">
            <summary>
            Ends
            </summary>
        </member>
        <member name="F:Cosmos.Queries.Operator.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="T:Cosmos.RandomExtensions">
            <summary>
            Random extensions<br />
            随机数扩展方法
            </summary>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBool(System.Random)">
            <summary>
            Random returns true or false.<br />
            随机返回 True 或 False
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            Random returns a member of the given enum<br />
            随机返回一个指定的枚举对象的成员
            </summary>
            <typeparam name="T"> 枚举 </typeparam>
            <param name="random"></param>
            <returns> 枚举对象的成员 </returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            用随机数填充指定字节数组的元素。
            </summary>
            <param name="random"></param>
            <param name="length"> 字节长度 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextUInt16(System.Random)">
            <summary>
            随机返回一个无符号八位整数。
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextInt16(System.Random)">
            <summary>
            随机返回一个有符号十六位整数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextFloat(System.Random)">
            <summary>
            随机返回一个单精度浮点数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            在指定范围内随机返回一个时间
            </summary>
            <param name="random">  </param>
            <param name="minValue"> 时间起始 </param>
            <param name="maxValue"> 时间截止 </param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            随机返回一个时间
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.RandomExtensions.OneOf``1(System.Random,``0[])">
            <summary>
            随机获得一个指定范围的结果
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.AttributeCollection">
            <summary>
            An attribute collection <br />
            特性集合
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.AttributeCollection.Count">
            <summary>
            The number of attributes. <br />
            特性的数量
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Has``1">
            <summary>
            Determine whether the specified Attribute type is included. <br />
            判断给定的特性是否存在于此
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Has(System.Type)">
            <summary>
            Determine whether the specified Attribute type is included. <br />
            判断给定的特性类型是否存在于此
            </summary>
            <param name="typeOfAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Get``1">
            <summary>
            Get the first instance of the specified Attribute type. <br />
            获得给定的特性的实例
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Get(System.Type)">
            <summary>
            Get the first instance of the specified Attribute type. <br />
            获得给定的特性类型的实例
            </summary>
            <param name="typeOfAttribute"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.GetAll``1">
            <summary>
            Get all instances of the specified Attribute type. <br />
            获得所有给定的特性的实例
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.GetAll(System.Type)">
            <summary>
            Get all instances of the specified Attribute type. <br />
            获得所有给定的特性类型的实例
            </summary>
            <param name="typeOfAttribute"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Of(System.Type)">
            <summary>
            Create an instance of <see cref="T:Cosmos.Reflection.AttributeCollection"/> by the given type.
            根据给定的类型，解析并返回特性集合
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.Of``1">
            <summary>
            Create an instance of <see cref="T:Cosmos.Reflection.AttributeCollection"/> by the given type.
            根据给定的类型，解析并返回特性集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.OfAttributes(System.Attribute[])">
            <summary>
            Create an instance of <see cref="T:Cosmos.Reflection.AttributeCollection"/> by the given attribute collection.
            根据给定的特性集合，返回特性集合实例
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollection.OfAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Create an instance of <see cref="T:Cosmos.Reflection.AttributeCollection"/> by the given attribute collection.
            根据给定的特性集合，返回特性集合实例
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.AttributeCollectionExtensions">
            <summary>
            Extensions for attribute collection
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollectionExtensions.JoinToCollection(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Convert attribute collection into <see cref="T:Cosmos.Reflection.AttributeCollection"/>. <br />
            将特性集合转换为 AttributeCollection
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AttributeCollectionExtensions.JoinToCollection(System.Attribute[])">
            <summary>
            Convert attribute collection into <see cref="T:Cosmos.Reflection.AttributeCollection"/>. <br />
            将特性集合转换为 AttributeCollection
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeClass">
            <summary>
            Type clazz
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.VoidClazz">
            <summary>
            Gets clazz for void.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ObjectClazz">
            <summary>
            Gets clazz for object.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ObjectArrayClazz">
            <summary>
            Gets clazz for object array
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteClazz">
            <summary>
            Gets clazz for byte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteNullableClazz">
            <summary>
            Gets clazz for nullable byte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ByteArrayClazz">
            <summary>
            Gets clazz for byte array
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SByteClazz">
            <summary>
            Gets clazz for sbyte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SByteNullableClazz">
            <summary>
            Gets clazz for nullable sbyte
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int16Clazz">
            <summary>
            Gets clazz for int16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int16NullableClazz">
            <summary>
            Gets clazz for nullable int16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt16Clazz">
            <summary>
            Gets clazz for uint16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt16NullableClazz">
            <summary>
            Gets clazz for nullable uint16
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int32Clazz">
            <summary>
            Gets clazz for int32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int32NullableClazz">
            <summary>
            Gets clazz for nullable int32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt32Clazz">
            <summary>
            Gets clazz for uint32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt32NullableClazz">
            <summary>
            Gets clazz for nullable uint32
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int64Clazz">
            <summary>
            Gets clazz for int64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.Int64NullableClazz">
            <summary>
            Gets clazz for nullable int64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt64Clazz">
            <summary>
            Gets clazz for uint64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UInt64NullableClazz">
            <summary>
            Gets clazz for nullable uint64
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ShortClazz">
            <summary>
            Gets clazz for short
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ShortNullableClazz">
            <summary>
            Gets clazz for nullable short
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UShortClazz">
            <summary>
            Gets clazz for ushort
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UShortNullableClazz">
            <summary>
            Gets clazz for nullable ushort
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.IntClazz">
            <summary>
            Gets clazz for int
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.IntNullableClazz">
            <summary>
            Gets clazz for nullable int
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UIntClazz">
            <summary>
            Gets clazz for uint
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.UIntNullableClazz">
            <summary>
            Gets clazz for nullable uint
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.LongClazz">
            <summary>
            Gets clazz for long
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.LongNullableClazz">
            <summary>
            Gets clazz for nullable long
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ULongClazz">
            <summary>
            Gets clazz for ulong
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ULongNullableClazz">
            <summary>
            Gets clazz for nullable ulong
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FloatClazz">
            <summary>
            Gets clazz for float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FloatNullableClazz">
            <summary>
            Gets clazz for nullable float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SingleClazz">
            <summary>
            Gets clazz for float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.SingleNullableClazz">
            <summary>
            Gets clazz for nullable float
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DoubleClazz">
            <summary>
            Gets clazz for double
            </summary>
            <summary>
            Gets clazz for nullable decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DoubleNullableClazz">
            <summary>
            Gets clazz for nullable double
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DecimalClazz">
            <summary>
            Gets clazz for decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DecimalNullableClazz">
            <summary>
            Gets clazz for nullable decimal
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.StringClazz">
            <summary>
            Gets clazz for string
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeClazz">
            <summary>
            Gets clazz for DateTime
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeNullableClazz">
            <summary>
            Gets clazz for nullable DateTime
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeOffsetClazz">
            <summary>
            Gets clazz for DateTimeOffset
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.DateTimeOffsetNullableClazz">
            <summary>
            Gets clazz for nullable DateTimeOffset
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TimeSpanClazz">
            <summary>
            Gets clazz for TimeSpan
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TimeSpanNullableClazz">
            <summary>
            Gets clazz for nullable TimeSpan
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GuidClazz">
            <summary>
            Gets clazz for guid.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GuidNullableClazz">
            <summary>
            Gets clazz for nullable guid.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.BooleanClazz">
            <summary>
            Gets clazz for bool.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.BooleanNullableClazz">
            <summary>
            Gets clazz for nullable bool.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.CharClazz">
            <summary>
            Gets clazz for char.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.CharNullableClazz">
            <summary>
            Gets clazz for nullable char.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.EnumClazz">
            <summary>
            Gets clazz for Enum.
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ValueTupleClazz">
            <summary>
            Gets clazz for ValueTuple
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.TaskClazz">
            <summary>
            Gets clazz for Task
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericTaskClazz">
            <summary>
            Gets clazz for Generic Task
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ValueTaskClazz">
            <summary>
            Gets clazz for ValueTask
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericValueTaskClazz">
            <summary>
            Gets clazz for Generic ValueTask
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.ListClazz">
            <summary>
            Gets clazz for List
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericListClazz">
            <summary>
            Gets clazz for Generic List
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.NullableClazz">
            <summary>
            Gets clazz for Nullable type
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.GenericNullableClazz">
            <summary>
            Gets clazz for Generic Nullable type
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FormattableClazz">
            <summary>
            Gets clazz for IFormattable
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeClass.FormatProviderClazz">
            <summary>
            Gets clazz for IFormatProvider
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeConv">
            <summary>
            Type conversion Utilities <br />
            类型转换工具
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeConv.GetNonNullableType(System.Type)">
            <summary>
            Convert nullable type to underlying type. <br />
            将可为空的类型转换为基础类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeConv.GetNonNullableType``1">
            <summary>
            Convert nullable type to underlying type. <br />
            将可为空的类型转换为基础类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.ReflectionOptions">
            <summary>
            Reflection options <br />
            反射选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.ReflectionAmbiguousOptions">
            <summary>
            Reflection Ambiguous options <br />
            反射歧义选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeReflections">
            <summary>
            Reflection Utilities. <br />
            反射工具
            </summary>
            <summary>
            Reflection Utilities.
            </summary>
            <summary>
            Reflection Utilities. <br />
            反射工具
            </summary>
            <summary>
            Reflection Utilities. <br />
            反射工具
            </summary>
            <summary>
            Reflection Utilities. <br />
            反射工具
            </summary>
            <summary>
            Reflection Utilities. <br />
            反射工具
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.MemberInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.ParameterInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttribute``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo. <br />
            从成员信息中获取指定的 Attribute 实例。
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of member</typeparam>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo. <br />
            从成员信息中获取一组指定的 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the MemberInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributeRequired(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.ReflectionAmbiguousOptions)">
            <summary>
            Obtain the specified Attribute instance from the ParameterInfo, and throw an exception if the acquisition fails.<br />
            从成员信息中获取指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <param name="ambOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.MemberInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.ParameterInfo)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired``1(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <typeparam name="TAttribute">Special typeInfo of attribute</typeparam>
            <returns>Attribute of special member</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the MemberInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="member">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributesRequired(System.Reflection.ParameterInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain a set of specified Attribute instances from the ParameterInfo, and throw an exception if the acquisition fails. <br />
            从成员信息中获取一组指定的 Attribute 实例，如果获取失败则抛出异常。
            </summary>
            <param name="parameter">Special member</param>
            <param name="attributeType"></param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            Obtain all Attribute instances from the MemberInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Obtain all Attribute instances from the ParameterInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain all Attribute instances from the MemberInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="member">Special member</param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetAttributes(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Obtain all Attribute instances from the ParameterInfo. <br />
            从成员信息中获取所有 Attribute 实例。
            </summary>
            <param name="parameter">Special member</param>
            <param name="refOptions"></param>
            <returns>Attribute of special field</returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeReflections.TypeCacheManager">
            <summary>
            Type caching manager <br />
            类型缓存管理器
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.TypeReflections.TypeCacheManager.TypePropertyCache">
            <summary>
            TypePropertyCache
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.TypeCacheManager.GetTypeProperties(System.Type)">
            <summary>
            Get all properties' info by the given type <br />
            根据给定的类型，反射获得其属性列表
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.TypeCacheManager.GetTypeFields(System.Type)">
            <summary>
            Get all fields' info by the given type <br />
            根据给定的类型，反射获得其字段列表
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsDescriptionDefined(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Determine whether <see cref="T:System.ComponentModel.DescriptionAttribute"/> is defined. <br />
            判断 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 是否被定义。
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsDescriptionDefined(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Determine whether <see cref="T:System.ComponentModel.DescriptionAttribute"/> is defined. <br />
            判断 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 是否被定义。
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription``1(Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="refOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription(System.Type,System.String,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription``1(System.String,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="memberName"></param>
            <param name="refOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDescription``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the description information of the member. The search will be carried out in the following order: <br />
            返回成员的描述信息。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DescriptionAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="expression"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName(System.Reflection.ParameterInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName``1(Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="refOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName(System.Type,System.String,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName``1(System.String,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="memberName"></param>
            <param name="refOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetDisplayName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Cosmos.Reflection.ReflectionOptions)">
            <summary>
            Returns the name of the member. The search will be carried out in the following order: <br />
            返回成员的名称。将按照以下顺序进行寻找：
            <para>
            - <see cref="T:System.ComponentModel.DisplayNameAttribute"/> <br />
            - <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> <br />
            - Name
            </para>
            </summary>
            <param name="expression"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsObjectDerivedFrom``1(``0,System.Type,Cosmos.Reflection.TypeIsOptions,Cosmos.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the object is derived from a given type. <br />
            判断对象是否派生自给定的类型。
            </summary>
            <param name="value"></param>
            <param name="parentType"></param>
            <param name="isOptions"></param>
            <param name="derivedOptions"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsObjectDerivedFrom``2(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the object is derived from a given type. <br />
            判断对象是否派生自给定的类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsTypeDerivedFrom(System.Type,System.Type,Cosmos.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the given type. <br />
            判断类型是否派生自给定的类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <param name="derivedOptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsTypeDerivedFrom``2(Cosmos.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the given type. <br />
            判断类型是否派生自给定的类型。
            </summary>
            <param name="derivedOptions"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsTypeBasedOn(System.Type,System.Type)">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsTypeBasedOn``2">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType(System.Type,System.Type,System.Type@,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericType"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType(System.Type,System.Type,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsImplementationOfGenericType``2(System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="genericArguments"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeFromGenericType(System.Type,System.Type)">
            <summary>
            Get the original <see cref="!:sourceType"/>. <br />
            When type inherits from genericType, returns that type.
            <para>
            获取原始<see cref="!:sourceType"/>。 <br />
            当类型从 genericType 继承时，返回该类型。
            </para>
            </summary>
            <param name="sourceType"></param>
            <param name="parentGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeFromGenericType``2">
            <summary>
            Get the original <see cref="!:TSource"/>. <br />
            When type inherits from genericType, returns that type.
            <para>
            获取原始<see cref="!:TSource"/>。 <br />
            当类型继承自 genericType 时，返回该类型。
            </para>
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeArgsFromGenericType(System.Type,System.Type)">
             <summary>
             Get the original <see cref="!:sourceType"/>. <br />
             When type inherits from genericType, gets all generic arguments in the <see cref="!:parentGenericType"/> corresponding to the <see cref="!:sourceType"/>.
             <para>
             获取原始<see cref="!:sourceType"/>。 <br />
             当type继承自genericType时，获取<see cref="!:sourceType"/>对应的<see cref="!:parentGenericType"/>中的所有泛型参数。
            </para>
             </summary>
             <param name="sourceType"></param>
             <param name="parentGenericType"></param>
             <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetRawTypeArgsFromGenericType``2">
             <summary>
             Get the original <see cref="!:TSource"/>. <br />
             When type inherits from genericType, gets all generic arguments in the <see cref="!:TGenericParent"/> corresponding to the <see cref="!:TSource"/>.
             <para>
             获取原始<see cref="!:TSource"/>。 <br />
             当type继承自genericType时，获取<see cref="!:TGenericParent"/>对应的<see cref="!:TSource"/>中的所有泛型参数。
            </para>
             </summary>
             <typeparam name="TSource"></typeparam>
             <typeparam name="TGenericParent"></typeparam>
             <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetEnumUnderlyingType(System.Type)">
            <summary>
            Get the underlying type of the enum <br />
            获取枚举的底层类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.GetEnumUnderlyingType``1">
            <summary>
            Get the underlying type of the enum <br />
            获取枚举的底层类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsInterfaceDefined(System.Type,System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsInterfaceDefined``1(System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsBoolean(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a Boolean type.<br />
            判断给定的 MemberInfo 元信息是否为布尔类型。
            </summary>
            <param name="isOptions"></param>
            <param name="member">成员</param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsDateTime(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a datetime.<br />
            判断给定的 MemberInfo 元信息是否为 DateTime 类型。
            </summary>
            <param name="isOptions"></param>
            <param name="member">成员</param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsNumeric(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a numeric type.<br />
            判断给定的 MemberInfo 元信息是否为数字类型。
            </summary>
            <param name="member">成员</param>
            <param name="isOptions"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsEnum(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is an enum type.<br />
            判断给定的 MemberInfo 元信息是否为枚举类型。
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsStruct(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a struct type.<br />
            判断给定的 MemberInfo 元信息是否为结构类型。
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsPrimitive(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a primitive type.<br />
            判断给定的 MemberInfo 元信息是否为原始类型。
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsValueType(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given MemberInfo is a value type.<br />
            判断给定的 MemberInfo 元信息是否为值类型。
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeReflections.IsCollection(System.Reflection.MemberInfo)">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeDerivedOptions">
            <summary>
            Type derivation options <br />
            类型派生选项
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.TypeDerivedOptions.Default">
            <summary>
            Default <br />
            默认
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.TypeDerivedOptions.CanAbstract">
            <summary>
            Allow recognition of abstract classes <br />
            允许识别抽象类
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeInheritReflectionExtensions">
            <summary>
            Type-Inherit reflection extensions <br />
            类型继承反射扩展
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsDerivedFrom(System.Type,System.Type,Cosmos.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the specified type. <br />
            判断类型是否派生自指定类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <param name="derivedOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsDerivedFrom``1(System.Type,Cosmos.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the specified type. <br />
            判断类型是否派生自指定类型。
            </summary>
            <param name="sourceType"></param>
            <param name="derivedOptions"></param>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsBasedOn(System.Type,System.Type)">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsBasedOn``1(System.Type)">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <param name="sourceType"></param>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="parentType"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsGenericAssignableFrom``1(System.Type)">
            <summary>
            Determine whether the current <see cref="!:TSource"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:TSource"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="parentType"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsImplementationOfGenericType(System.Type,System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:parentType"/>
            or is an implementation of the generic interface <see cref="!:parentType"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:parentType"/>，或为泛型接口 <see cref="!:parentType"/> 的实现。
            </summary>
            <param name="sourceType">给定类型</param>
            <param name="parentType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeInheritReflectionExtensions.IsImplementationOfGenericType``1(System.Type)">
            <summary>
            Determine whether the current <see cref="!:sourceType"/> is derived from the generic class <see cref="!:TParent"/>
            or is an implementation of the generic interface <see cref="!:TParent"/>. <br />
            判断当前类型 <see cref="!:sourceType"/> 是否派生自泛型类 <see cref="!:TParent"/>，或为泛型接口 <see cref="!:TParent"/> 的实现。
            </summary>
            <param name="sourceType"></param>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.InterfaceOptions">
            <summary>
            Interface options <br />
            接口选项
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.InterfaceOptions.Default">
            <summary>
            Default <br />
            默认
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.InterfaceOptions.IgnoreGenericArgs">
            <summary>
            Ignore generic args <br />
            忽略泛型参数
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeIsOptions">
            <summary>
            Options to choose from when guessing the type <br />
            对类型进行推测时可供选择的选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.Types">
            <summary>
            Type Utilities <br />
            类型工具
            </summary>
            <summary>
            Type Utilities <br />
            类型工具
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType(System.Type,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="type"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType``1(Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsTupleType``1(``0,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a tuple type.<br />
            判断给定的对象是否为元组类型
            </summary>
            <param name="value"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueTupleType(System.Type,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a value tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="type"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueTupleType``1(Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a value tuple type.<br />
            判断给定的类型是否为元组类型
            </summary>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueTupleType``1(``0,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a value tuple type.<br />
            判断给定的对象是否为元组类型
            </summary>
            <param name="value"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNumericType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a numeric type.<br />
            判断给定的对象是否为数字类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType(System.Type)">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType``1">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsNullableType``1(``0)">
            <summary>
            Determine whether the given object is a nullable type. <br />
            判断给定的对象是否为可空类型。
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsEnumType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is enum type
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is value type
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is value type
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsValueType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is value type
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsPrimitiveType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is primitive type
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsPrimitiveType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is primitive type
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsPrimitiveType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is primitive type
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsStructType(System.Type,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is struct type <br />
            是否为结构类型
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsStructType``1(Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is struct type <br />
            是否为结构类型
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsStructType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Is struct type <br />
            是否为结构类型
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsStaticType(System.Type)">
            <summary>
             Is static type <br />
            是否为j静态类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsStaticType``1">
            <summary>
            Is static type <br />
            是否为j静态类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAnonymousType(System.Type)">
            <summary>
             Is anonymous type <br />
            是否为j匿名类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType(System.Type)">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType``1">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsCollectionType``1(``0,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a collection or array type.<br />
            判断给定的对象是否为集合或数组类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined(System.Type,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``1(System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``2(Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsAttributeDefined``2(``0,Cosmos.Reflection.ReflectionOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="value"></param>
            <param name="options"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsInterfaceDefined(System.Type,System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsInterfaceDefined``1(System.Type,Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsInterfaceDefined``2(Cosmos.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.IsInterfaceDefined``2(``0,Cosmos.Reflection.InterfaceOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="value"></param>
            <param name="options"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``1(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <typeparam name="T">Special type T</typeparam>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``2(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``3(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``4(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``5(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``6(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``7(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``8(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``9(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``10(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``11(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``12(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``13(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``14(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``15(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of``16(Cosmos.Reflection.TypeOfOptions)">
            <summary>
            Return the corresponding type according to the given generic parameter. <br />
            根据给定的通用参数返回相应的类型。
            </summary>
            <param name="options"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.Types.Of(System.Object[],Cosmos.Reflection.TypeOfOptions)">
            <summary>
            According to the given object, return its corresponding type. <br />
            根据给定的对象，返回其对应的类型。
            </summary>
            <param name="objects">Object array</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeOfOptions">
            <summary>
            Options to choose when recognizing the type <br />
            对类型进行识别时可供选择的选项
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypesVal">
            <summary>
            The type collection value <br />
            类型集合值
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypesVal.Count">
            <summary>
            Calculate the total number of types in the type collection value. <br />
            计算类型集合值中的类型总数。
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypesVal.TypeArray">
            <summary>
            Get all types <br />
            从类型集合值中获取所有类型
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypesVal.Types">
            <summary>
            Get all types <br />
            从类型集合值中获取所有类型
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypesVal.Item(System.Int32)">
            <summary>
            Get type by index
            </summary>
            <param name="index"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypesVal.Create(System.Type[])">
            <summary>
            According to the given type array, construct a type collection value <br />
            根据给定的类型数组，构建一个类型集合值
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.Reflection.TypesVal.Empty">
            <summary>
            Get empty type collection value <br />
            获取空的类型集合值
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypesVal.IsEmpty">
            <summary>
            Whether the tag is empty type collection value <br />
            标记是否为空的类型集合值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Singleton">
            <summary>
            Provide a unified singleton management portal. <br />
            单例管理器
            </summary>
        </member>
        <member name="P:Cosmos.Singleton.AllSingletons">
            <summary>
            All singleton objects <br />
            获取所有单例实例
            </summary>
        </member>
        <member name="T:Cosmos.Singleton`1">
            <summary>
            Provide a unified singleton management portal and a copy of itself. <br />
            单例管理器的派生类，指定了某种类型，形成具体类型的单例获取入口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.Singleton`1.Instance">
            <summary>
            Singleton instance <br />
            获取单例
            </summary>
        </member>
        <member name="T:Cosmos.SingletonList`1">
            <summary>
            Provide a unified singleton management portal and a copy of itself. <br />
            单例管理器的派生类，指定了某种类型，形成具体类型的单例获取入口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cosmos.SingletonList`1.Instance">
            <summary>
            Get a singleton of the specified type T <br />
            获取给定单例的集合（单例实例）
            </summary>
        </member>
        <member name="T:Cosmos.SingletonDictionary`2">
            <summary>
            Provide a unified singleton management portal and a copy of itself <br />
            单例管理器的派生类，指定了某种类型，形成具体类型的单例获取入口。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Cosmos.SingletonDictionary`2.Instance">
            <summary>
            Get a singleton of the specified type T <br />
            获取给定单例的字典（单例实例）
            </summary>
        </member>
        <member name="T:Cosmos.Text.CharMayOptions">
            <summary>
            Guess the possibility of characters <br />
            推测字符的可能情况
            </summary>
        </member>
        <member name="F:Cosmos.Text.CharMayOptions.Default">
            <summary>
            Default <br />
            默认
            </summary>
        </member>
        <member name="F:Cosmos.Text.CharMayOptions.IgnoreNullable">
            <summary>
            Ignore nullable <br />
            忽略空字符
            </summary>
        </member>
        <member name="T:Cosmos.Text.Chars">
            <summary>
            Char Utilities <br />
            字符工具集
            </summary>
        </member>
        <member name="M:Cosmos.Text.Chars.BeContainedIn(System.Char,System.Char[])">
            <summary>
            Determine whether the character is included in the given character set. <br />
            判断字符是否包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.BeContainedIn(System.Char,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Determine whether the character is included in the given character set. <br />
            判断字符是否包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="case"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.BeNotContainedIn(System.Char,System.Char[])">
            <summary>
            Determine whether the character is not included in the given character set. <br />
            判断字符是否不包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.BeNotContainedIn(System.Char,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Determine whether the character is not included in the given character set. <br />
            判断字符是否不包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="case"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            Determine whether the given character is included in the range <br />
            判断给定的字符是否包含在范围内
            </summary>
            <param name="char"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.Range(System.Char,System.Char)">
            <summary>
            According to the given two characters, generate a set of continuous character sequence <br />
            根据给定的两个字符，生成一组连续的字符序列
            </summary>
            <param name="char"></param>
            <param name="toCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Chars.Repeat(System.Char,System.Int32)">
            <summary>
            Generate a set of character sequences according to the given characters and the number of repetitions <br />
            重复指定次数的字符
            </summary>
            <param name="char"></param>
            <param name="repeatTimes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.CharsExtensions">
            <summary>
            Chars extensions <br />
            字符扩展
            </summary>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.BeContainedIn(System.Char,System.Char[])">
            <summary>
            Determine whether the character is included in the given character set. <br />
            判断字符是否包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.BeContainedIn(System.Char,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Determine whether the character is included in the given character set. <br />
            判断字符是否包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="case"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.BeNotContainedIn(System.Char,System.Char[])">
            <summary>
            Determine whether the character is not included in the given character set. <br />
            判断字符是否不包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.BeNotContainedIn(System.Char,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Determine whether the character is not included in the given character set. <br />
            判断字符是否不包含于给定的字符集合中
            </summary>
            <param name="char"></param>
            <param name="case"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            Determine whether the given character is included in the range <br />
            判断给定的字符是否包含在范围内
            </summary>
            <param name="char"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            Generate a set of character sequences according to the given characters and the number of repetitions <br />
            重复指定次数的字符
            </summary>
            <param name="char"></param>
            <param name="repeatTimes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.CharsShortcutExtensions">
            <summary>
            Chars shortcut extensions <br />
            字符捷径扩展
            </summary>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToLower(System.Char)">
            <summary>
            To Lower <br />
            转为小写
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Lower <br />
            转为小写
            </summary>
            <param name="char"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToLowerInvariant(System.Char)">
            <summary>
            To Lower invariant <br />
            转为小写
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsUpper(System.Char)">
            <summary>
            Is Upper <br />
            转为大写
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            To Upper <br />
            转为大写
            </summary>
            <param name="char"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToUpperInvariant(System.Char)">
            <summary>
            To Upper invariant <br />
            转为大写
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.Equals(System.Char,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Equals <br />
            判断是否相等
            </summary>
            <param name="char"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.Equals(System.Nullable{System.Char},System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Equals <br />
            判断是否相等
            </summary>
            <param name="char"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            Equals ignore case <br />
            判断是否相等
            </summary>
            <param name="char"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.EqualsIgnoreCase(System.Nullable{System.Char},System.Char)">
            <summary>
            Equals ignore case <br />
            判断是否相等
            </summary>
            <param name="char"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space. <br />
            指示指定的 Unicode 字符是否归类为空格。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsControl(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a control character. <br />
            指示指定的 Unicode 字符是否归类为控制字符。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsDigit(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a decimal digit. <br />
            指示指定的 Unicode 字符是否归类为十进制数字。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsLetter(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a Unicode letter. <br />
            指示指定的 Unicode 字符是否归类为 Unicode 字母。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a letter or a decimal digit. <br />
            指示指定的 Unicode 字符属于字母还是十进制数字。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsLower(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a lowercase letter. <br />
            指示指定的 Unicode 字符是否归类为小写字母。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsNumber(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a number. <br />
            指示指定的 Unicode 字符是否归类为数字。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsPunctuation(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a punctuation mark. <br />
            指示指定的 Unicode 字符是否归类为标点符号。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsSeparator(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a separator character. <br />
            指示指定的 Unicode 字符是否归类为分隔符。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsSymbol(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a symbol character. <br />
            指示指定的 Unicode 字符是否归类为符号字符。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsSurrogate(System.Char)">
            <summary>
            Indicates whether the specified character has a surrogate code unit. <br />
            指示指定的字符是否具有代理代码单元。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            Indicates whether the two specified Char objects form a surrogate pair. <br />
            指示两个指定的 Char 对象是否形成代理对。
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsHighSurrogate(System.Char)">
            <summary>
            Indicates whether the specified Char object is a high surrogate. <br />
            指示指定的 Char 对象是否为高代理。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Indicates whether the specified Char object is a low surrogate. <br />
            指示指定的 Char 对象是否为低代理。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.GetNumericValue(System.Char)">
            <summary>
            Converts the specified numeric Unicode character to a double-precision floating point number. <br />
            将指定的数字 Unicode 字符转换为双精度浮点数。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ToString(System.Char)">
            <summary>
            Converts the specified Unicode character to its equivalent string representation. <br />
            将指定的 Unicode 字符转换为其等效的字符串表示形式。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.ConvertToUtf32(System.Char,System.Char)">
            <summary>
            Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point. <br />
            将 UTF-16 编码的代理对的值转换为 Unicode 代码点。
            </summary>
            <param name="highSurrogate"></param>
            <param name="lowSurrogate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.CharsShortcutExtensions.GetUnicodeCategory(System.Char)">
            <summary>
            Categorizes a specified Unicode character into a group identified by one of the UnicodeCategory values. <br />
            将指定的 Unicode 字符分类到由 UnicodeCategory 值之一标识的组中。
            </summary>
            <param name="char"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.IgnoreCase">
            <summary>
            Ignore case <br />
            忽略大小写开关
            </summary>
        </member>
        <member name="F:Cosmos.Text.IgnoreCase.TRUE">
            <summary>
            True <br />
            忽略大小写
            </summary>
        </member>
        <member name="F:Cosmos.Text.IgnoreCase.FALSE">
            <summary>
            False <br />
            不忽略大小写
            </summary>
        </member>
        <member name="M:Cosmos.Text.Internals.BaseXCore.IsPowerOf2(System.UInt32)">
            <summary>
            From: http://stackoverflow.com/a/600306/1046374
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Internals.BaseXCore.Lcm(System.Int32,System.Int32)">
            <summary>
            From: http://stackoverflow.com/a/13569863/1046374
            </summary>
        </member>
        <member name="T:Cosmos.Text.Strings">
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
            <summary>
            String Utils<br />
            字符串工具
            </summary>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForLetters(System.String)">
            <summary>
            Returns the number of letters contained in the string.<br />
            返回字符串中所包含字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForLettersUpperCase(System.String)">
            <summary>
            Returns the number of uppercase letters in the string.<br />
            返回字符串中所包含大写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForLettersLowerCase(System.String)">
            <summary>
            Returns the number of lowercase letters in the string.<br />
            返回字符串中所包含小写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForNumbers(System.String)">
            <summary>
            Returns the number of digit contained in the string.<br />
            返回字符串中所包含数字的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrences(System.String,System.Char)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的字符
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrences(System.String,System.String)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的子字符串
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrencesIgnoreCase(System.String,System.Char)">
            <summary>
            Count Occurrences ignore case <br />
            计算给定字符串中有多少个指定的字符，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrencesIgnoreCase(System.String,System.String)">
            <summary>
            Count Occurrences ignore case <br />
            计算给定字符串中有多少个指定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrences(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Count Occurrences with ignore case options <br />
            计算给定字符串中有多少个指定的字符，根据 <see cref="T:Cosmos.Text.IgnoreCase"/> 开关来决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountOccurrences(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Count Occurrences with ignore case options <br />
            计算给定字符串中有多少个指定的子字符串，根据 <see cref="T:Cosmos.Text.IgnoreCase"/> 开关来决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForDiffChars(System.String,System.String)">
            <summary>
            Compare strings to get the number of unequal characters. <br />
            比较字符串，获取不相等字符的数量。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForDiffCharsIgnoreCase(System.String,System.String)">
            <summary>
            Compare strings to get the number of unequal characters, ignore case. <br />
            比较字符串，获取不相等字符的数量，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountForDiffChars(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Compare strings to get the number of unequal characters with IgnoreCase options. <br />
            比较字符串，获取不相等字符的数量，根据给定的 IgnoreCase 选项。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.String,System.String[])">
            <summary>
            Contains <br />
            在字符串中是否包含任意一个给定的子字符串
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.Char)">
            <summary>
            Contains <br />
            在字符串中是否包含给定的字符
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.Char,System.Char[])">
            <summary>
            Contains <br />
            在字符串中是否包含任意一个给定的字符
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ContainsIgnoreCase(System.String,System.String,System.String[])">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含任意一个给定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ContainsIgnoreCase(System.String,System.Char)">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含给定的字符，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ContainsIgnoreCase(System.String,System.Char,System.Char[])">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含任意一个给定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.String[],Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含任意一个给定的子字符串，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含给定的字符，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Contains(System.String,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含任意一个给定的字符，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="characters"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.AvoidNull(System.String)">
            <summary>
            Avoid null, so convert null to empty.<br />
            将 null 转换为 Empty
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.NullToEmpty(System.String)">
            <summary>
            Convert null to empty.<br />
            将 null 转换为 Empty
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.EmptyToNull(System.String)">
            <summary>
            Convert empty to null.<br />
            将 Empty 转换为 null
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.FilterByChar(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Filter by char <br />
            过滤为字符
            </summary>
            <param name="text"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.FilterForNumbersAndLetters(System.String)">
            <summary>
            Filter for only letters and numbers.<br />
            只获取字母和数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.FilterForNumbers(System.String)">
            <summary>
            Filter for only digit.<br />
            只获取字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.FilterForLetters(System.String)">
            <summary>
            Filter for only letters.<br />
            只获取字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.GetNumbersAndLetters(System.String)">
            <summary>
            Get only letters and numbers.<br />
            只获取字母和数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.GetNumbers(System.String)">
            <summary>
            Get only digit.<br />
            只获取字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.GetLetters(System.String)">
            <summary>
            Get only letters.<br />
            只获取字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.HasNumbers(System.String)">
            <summary>
            Returns whether it contains digit.<br />
            返回是否包含数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.HasNumbersAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of digit.<br />
            至少包含指定数量的数字。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.HasLetters(System.String)">
            <summary>
            Returns whether it contains letters.<br />
            返回是否包含字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.HasLettersAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of letters.<br />
            至少包含指定数量的字母。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Right(System.String,System.Int32)">
            <summary>
            Cut off from right to left. <br />
            从右向左截取字符串
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Left(System.String,System.Int32)">
            <summary>
            Cut off from left to right <br />
            从左向右截取字符串
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Merge(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Merge char coll to string. <br />
            将字符集合合并为一个字符串
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Merge(System.String,System.String[])">
            <summary>
            Merge string coll to string. <br />
            将字符串集合合并为一个字符串
            </summary>
            <param name="text"></param>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Merge(System.String,System.String,System.String[])">
            <summary>
            Merge string coll to string. <br />
            将字符串集合合并为一个字符串
            </summary>
            <param name="text"></param>
            <param name="string"></param>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Merge(System.String,System.Char,System.Char[])">
            <summary>
            Merge char coll to string. <br />
            将字符集合合并为一个字符串
            </summary>
            <param name="text"></param>
            <param name="char"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Remove(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove <br />
            从字符串中移除给定的子字符串，根据 IgnoreCase 选项来控制大小写。
            </summary>
            <param name="text"></param>
            <param name="removeText"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveChars(System.String,System.Char[])">
            <summary>
            Remove all specified characters. <br />
            移除所有指定的字符。
            </summary>
            <param name="text"></param>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveWhiteSpace(System.String)">
            <summary>
            Remove all spaces. <br />
            移除所有空格。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveDuplicateWhiteSpaces(System.String)">
            <summary>
            Remove duplicate space <br />
            从字符串中移除所有重复的空格
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveDuplicateChar(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove duplicate char <br />
            从字符串中移除所有重复的字符
            </summary>
            <param name="text"></param>
            <param name="charRemove"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveSince(System.String,System.Int32)">
            <summary>
            Remove since the given index <br />
            从给定的位置开始移除所有字符，位置从 0 开始计算
            </summary>
            <param name="text"></param>
            <param name="indexOfStartToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveSince(System.String,System.String)">
            <summary>
            Remove since the given text <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveSinceIgnoreCase(System.String,System.String)">
            <summary>
            Remove since the given text and ignore case <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符，并忽略大小写
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.RemoveSince(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove since the given text with ignore case options <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符，根据 IgnoreCase 选项决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Repeat(System.String,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="text"></param>
            <param name="repeatTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace ignore case <br />
            替换，无视大小写
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceOnlyWholePhrase(System.String,System.String,System.String)">
            <summary>
            Replace only whole phrase <br />
            只替换完整单词
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceFirstOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace first occurrence <br />
            只替换首个命中的值
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceLastOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace last occurrence <br />
            只替换最后一个命中的值
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceOnlyAtEndIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace only at end ignore case <br />
            只替换结尾命中的结果，并无视大小写
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace <br />
            替换
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="comparisionType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceRecursive(System.String,System.String,System.String)">
            <summary>
            Replace recursive <br />
            递归替换
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceCharsWithWhiteSpace(System.String,System.Char[])">
            <summary>
            Replace chars with space <br />
            用空格来替换所有命中的字符
            </summary>
            <param name="text"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReplaceNumbersWith(System.String,System.Char)">
            <summary>
            Replace numbers with... <br />
            用给定的字符来替换数字
            </summary>
            <param name="text"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Truncate(System.String,System.Int32,System.String,System.String)">
            <summary>
            Truncate <br />
            截短，并用给定的字符串结尾
            </summary>
            <param name="text"></param>
            <param name="maxLength"></param>
            <param name="placeholder"></param>
            <param name="shortPlaceholder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonPrefix(System.String,System.String)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonPrefix(System.String,System.String,System.Int32@)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonSuffix(System.String,System.String)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CommonSuffix(System.String,System.String,System.Int32@)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.IsUpper(System.String)">
            <summary>
            Is upper <br />
            判断是否为大写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.IsLower(System.String)">
            <summary>
            Is lower <br />
            判断是否为小写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:Cosmos.Text.Strings.NEWLINE">
            <summary>
            New line <br />
            换行符
            </summary>
        </member>
        <member name="M:Cosmos.Text.Strings.CountByLines(System.String)">
            <summary>
            Count by lines <br />
            计算行数
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.SplitByLines(System.String)">
            <summary>
            Split by lines <br />
            将多行文本分割为单行文本集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.TruncateByLines(System.String,System.Int32,System.String)">
            <summary>
            Truncate by lines <br />
            将多行文本分割为单行文本集合，并截取其中的一部分，其余部分用指定的占位符代替
            </summary>
            <param name="text"></param>
            <param name="maxLines"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.GetGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Gets the captured substring from the input string. <br />
            从输入字符串中获取捕获的子字符串。
            </summary>
            <param name="match"></param>
            <param name="group"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Text.Strings.EvaluateSimilarity(System.String,System.String,System.Double)">
            <summary>
            Evaluate string similarity and return quantitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <param name="similarityMinimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.EvaluateSimilarity(System.String,System.String,System.Double,System.Int32)">
            <summary>
            Evaluate string similarity and return quantitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <param name="similarityMinimal"></param>
            <param name="diffFound"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.EvaluateSimilarity(System.String,System.String)">
            <summary>
            Evaluate string similarity and return qualitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse <br />
            反转字符串
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Cosmos.Text.Strings.ReverseAndReturnNewInstance(System.Text.StringBuilder)">
            <summary>
            Reverse <see cref="T:System.Text.StringBuilder"/> <br />
            反转字符串，并返回一个新的 <see cref="T:System.Text.StringBuilder"/> 实例。
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ReverseAndToString(System.Text.StringBuilder)">
            <summary>
            Reverse string <br />
            反转字符串
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ToCapitalCase(System.String)">
            <summary>
            To capital case <br />
            将所有单词转换为首字符大写的词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.ToCamelCase(System.String)">
            <summary>
            To camel case <br />
            转换为 CamelCase 风格的值
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.CountByWords(System.String)">
            <summary>
            Count by words <br />
            单词数统计
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.SplitByWords(System.String)">
            <summary>
            Split by words <br />
            根据单词进行切割
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.Strings.TruncateByWords(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Truncate By Words <br />
            根据单词进行切割并截取，使用给定的占位符结尾
            </summary>
            <param name="text"></param>
            <param name="maxNumber"></param>
            <param name="placeholder"></param>
            <param name="extraSpace">额外的空格</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringsExtensions">
            <summary>
            String extensions <br />
            字符串扩展
            </summary>
            <summary>
            String extensions. <br />
            字符串扩展
            </summary>
            <summary>
            Strings extensions <br />
            字符串扩展
            </summary>
            <summary>
            String Extensions <br />
            字符串扩展
            </summary>
            <summary>
            String extensions <br />
            字符串扩展
            </summary>
            <summary>
            String extensions <br />
            字符串扩展
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForLetters(System.String)">
            <summary>
            Returns the number of letters contained in the string.<br />
            返回字符串中所包含字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForLettersUpperCase(System.String)">
            <summary>
            Returns the number of uppercase letters in the string.<br />
            返回字符串中所包含大写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForLettersLowerCase(System.String)">
            <summary>
            Returns the number of lowercase letters in the string.<br />
            返回字符串中所包含小写字母的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForNumbers(System.String)">
            <summary>
            Returns the number of digit contained in the string.<br />
            返回字符串中所包含数字的数量。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrences(System.String,System.Char)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的字符
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrences(System.String,System.String)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的子字符串
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrencesIgnoreCase(System.String,System.Char)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的字符，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrencesIgnoreCase(System.String,System.String)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrences(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的字符，根据 <see cref="T:Cosmos.Text.IgnoreCase"/> 开关来决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountOccurrences(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Count Occurrences <br />
            计算给定字符串中有多少个指定的子字符串，根据 <see cref="T:Cosmos.Text.IgnoreCase"/> 开关来决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForDiffChars(System.String,System.String)">
            <summary>
            Diff chars' count <br />
            比较字符串，获取不相等字符的数量。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountForDiffCharsIgnoreCase(System.String,System.String)">
            <summary>
            Diff chars' count ignore case <br />
            比较字符串，获取不相等字符的数量，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.String,System.String[])">
            <summary>
            Contains <br />
            在字符串中是否包含任意一个给定的子字符串
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.Char)">
            <summary>
            Contains <br />
            在字符串中是否包含给定的字符
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.Char,System.Char[])">
            <summary>
            Contains <br />
            在字符串中是否包含任意一个给定的字符
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ContainsIgnoreCase(System.String,System.String,System.String[])">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含任意一个给定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ContainsIgnoreCase(System.String,System.Char)">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含给定的字符，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ContainsIgnoreCase(System.String,System.Char,System.Char[])">
            <summary>
            Contains ignore case <br />
            在字符串中是否包含任意一个给定的子字符串，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.String[],Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含任意一个给定的子字符串，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含给定的字符，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="character"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Contains(System.String,System.Char[],Cosmos.Text.IgnoreCase)">
            <summary>
            Contains with ignore case options <br />
            在字符串中是否包含任意一个给定的字符，根据给定的 IgnoreCase 选项
            </summary>
            <param name="text"></param>
            <param name="characters"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Equals ignore case <br />
            相等判断，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="targetText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.EqualsToAnyIgnoreCase(System.String,System.String[])">
            <summary>
            Equals to any ignore case <br />
            相等判断，只要给定的字符串与字符串集合中任意一个值相等，就返回 True，忽略大小写
            </summary>
            <param name="text"></param>
            <param name="targetTexts"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Where(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Filter by char <br />
            过滤为字符
            </summary>
            <param name="text"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.HasNumbers(System.String)">
            <summary>
            Returns whether it contains digit.<br />
            返回是否包含数字。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.HasNumbersAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of digit.<br />
            至少包含指定数量的数字。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ContainsLetters(System.String)">
            <summary>
            Returns whether it contains letters.<br />
            返回是否包含字母。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ContainsLettersAtLeast(System.String,System.Int32)">
            <summary>
            Contain at least the specified number of letters.<br />
            至少包含指定数量的字母。
            </summary>
            <param name="text"></param>
            <param name="minCount"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Right(System.String,System.Int32)">
            <summary>
            Cut off from right to left. <br />
            从右向左截取字符串
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Left(System.String,System.Int32)">
            <summary>
            Cut off from left to right <br />
            从左向右截取字符串
            </summary>
            <param name="text"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Remove(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove <br />
            从字符串中移除给定的子字符串，根据 IgnoreCase 选项来控制大小写。
            </summary>
            <param name="text"></param>
            <param name="removeText"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveChars(System.String,System.Char[])">
            <summary>
            Remove all specified characters. <br />
            移除所有指定的字符。
            </summary>
            <param name="text"></param>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveWhiteSpace(System.String)">
            <summary>
            Remove all spaces. <br />
            移除所有空格。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveDuplicateWhiteSpaces(System.String)">
            <summary>
            Remove duplicate space <br />
            从字符串中移除所有重复的空格
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveDuplicateChar(System.String,System.Char,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove duplicate char <br />
            从字符串中移除所有重复的字符
            </summary>
            <param name="text"></param>
            <param name="charRemove"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveSince(System.String,System.Int32)">
            <summary>
            Remove since the given index <br />
            从给定的位置开始移除所有字符，位置从 0 开始计算
            </summary>
            <param name="text"></param>
            <param name="indexOfStartToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveSince(System.String,System.String)">
            <summary>
            Remove since the given text <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveSinceIgnoreCase(System.String,System.String)">
            <summary>
            Remove since the given text and ignore case <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符，并忽略大小写
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.RemoveSince(System.String,System.String,Cosmos.Text.IgnoreCase)">
            <summary>
            Remove since the given text with ignore case options <br />
            根据给定子字符串在字符串中的位置，移除该位置之后的所有字符，根据 IgnoreCase 选项决定是否忽略大小写
            </summary>
            <param name="text"></param>
            <param name="removeFromThis"></param>
            <param name="case"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeat<br />
            重复指定次数的字符
            </summary>
            <param name="text"></param>
            <param name="repeatTimes"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace ignore case <br />
            替换，无视大小写
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceOnlyWholePhrase(System.String,System.String,System.String)">
            <summary>
            Replace only whole phrase <br />
            只替换完整单词
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceFirstOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace first occurrence <br />
            只替换首个命中的值
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceLastOccurrence(System.String,System.String,System.String)">
            <summary>
            Replace last occurrence <br />
            只替换最后一个命中的值
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceOnlyAtEndIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Replace only at end ignore case <br />
            只替换结尾命中的结果，并无视大小写
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace <br />
            替换
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="comparisionType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceRecursive(System.String,System.String,System.String)">
            <summary>
            Replace recursive <br />
            递归替换
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceCharsWithWhiteSpace(System.String,System.Char[])">
            <summary>
            Replace chars with space <br />
            用空格来替换所有命中的字符
            </summary>
            <param name="text"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReplaceNumbersWith(System.String,System.Char)">
            <summary>
            Replace numbers with... <br />
            用给定的字符来替换数字
            </summary>
            <param name="text"></param>
            <param name="toReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Truncate(System.String,System.Int32,System.String,System.String)">
            <summary>
            Truncate <br />
            截短，并用给定的字符串结尾
            </summary>
            <param name="text"></param>
            <param name="maxLength"></param>
            <param name="placeholder"></param>
            <param name="shortPlaceholder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CommonPrefix(System.String,System.String)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CommonPrefix(System.String,System.String,System.Int32@)">
            <summary>
            Returns the common prefix.<br />
            从左到右，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CommonSuffix(System.String,System.String)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CommonSuffix(System.String,System.String,System.Int32@)">
            <summary>
            Returns the common suffix.<br />
            从右到左，返回共有的字符，直至遇到第一个不同的字符。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.IsUpper(System.String)">
            <summary>
            Is upper <br />
            判断是否为大写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.IsLower(System.String)">
            <summary>
            Is lower <br />
            判断是否为小写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountByLines(System.String)">
            <summary>
            Line count <br />
            计算行数
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.SplitByLines(System.String)">
            <summary>
            To lines <br />
            将多行文本分割为单行文本集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.TruncateByLines(System.String,System.Int32,System.String)">
            <summary>
            Truncate by lines <br />
            将多行文本分割为单行文本集合，并截取其中的一部分，其余部分用指定的占位符代替
            </summary>
            <param name="text"></param>
            <param name="maxLines"></param>
            <param name="placeholder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.GetGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Gets the captured substring from the input string. <br />
            从输入字符串中获取捕获的子字符串。
            </summary>
            <param name="match"></param>
            <param name="group"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.EvaluateSimilarity(System.String,System.String,System.Double)">
            <summary>
            Evaluate string similarity and return quantitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <param name="similarityMinimal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.EvaluateSimilarity(System.String,System.String,System.Double,System.Int32)">
            <summary>
            Evaluate string similarity and return quantitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <param name="similarityMinimal"></param>
            <param name="diffFound"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.EvaluateSimilarity(System.String,System.String)">
            <summary>
            Evaluate string similarity and return qualitative results. <br />
            评估字符串相似度并返回定量结果。
            </summary>
            <param name="text"></param>
            <param name="ComparisonText"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.AppendAll``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Shortcut for adding an array of values to a StringBuilder. <br />
            将一组值添加到 StringBuilder 中。
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.AppendAll``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Char@)">
            <summary>
            Shortcut for adding an array of values to a StringBuilder. <br />
            将一组值添加到 StringBuilder 中。
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>
            Appends values to StringBuilder prefixing the provided separator. <br />
            将值附加到 StringBuilder 以提供的分隔符为前缀。
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.Char@,``0[])">
            <summary>
            Appends values to StringBuilder prefixing the provided separator. <br />
            将值附加到 StringBuilder 以提供的分隔符为前缀。
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.AppendWithSeparator``1(System.Text.StringBuilder,System.Collections.Generic.IDictionary{System.String,``0},System.String,System.String,System.String)">
            <summary>
            Appends a key/value pair to StringBuilder using the provided separators. <br />
            将键值对附加到 StringBuilder 以提供的分隔符为前缀。
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.Reverse(System.Text.StringBuilder)">
            <summary>
            Reverse <br />
            反转字符串
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReverseAndReturnNewInstance(System.Text.StringBuilder)">
            <summary>
            Reverse <see cref="T:System.Text.StringBuilder"/> <br />
            反转字符串，并返回一个新的 <see cref="T:System.Text.StringBuilder"/> 实例。
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ReverseAndToString(System.Text.StringBuilder)">
            <summary>
            Reverse string <br />
            反转字符串
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToCharArray(System.Text.StringBuilder)">
            <summary>
            To char array <br />
            将 <see cref="T:System.Text.StringBuilder"/> 转换为字符数组
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@)">
            <summary>
            To StringBuilder <br />
            将一组只读的连续内存的值转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To StringBuilder <br />
            将一组对象转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@,System.String@)">
            <summary>
            To StringBuilder <br />
            将一组只读的连续内存的值转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.ReadOnlySpan{``0}@,System.Char@)">
            <summary>
            To StringBuilder <br />
            将一组对象转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0},System.String@)">
            <summary>
            To StringBuilder <br />
            将一组对象转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToStringBuilder``1(System.Collections.Generic.IEnumerable{``0},System.Char@)">
            <summary>
            To StringBuilder <br />
            将一组对象转换为 <see cref="T:System.Text.StringBuilder"/>。
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToCapitalCase(System.String)">
            <summary>
            To capital case <br />
            将所有单词转换为首字符大写的词
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.ToCamelCase(System.String)">
            <summary>
            To camel case <br />
            转换为 CamelCase 风格的值
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.CountByWords(System.String)">
            <summary>
            Count by words <br />
            单词数统计
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.SplitByWords(System.String)">
            <summary>
            Split by words <br />
            根据单词进行切割
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsExtensions.TruncateByWords(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Truncate By Words <br />
            根据单词进行切割并截取，使用给定的占位符结尾
            </summary>
            <param name="text"></param>
            <param name="maxNumber"></param>
            <param name="placeholder"></param>
            <param name="extraSpace">额外的空格</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringsShortcutExtensions">
            <summary>
            String shortcut extensions <br />
            字符串捷径扩展
            </summary>
            <summary>
            String Shortcut Extensions <br />
            字符串捷径扩展
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Convert string to byte array <br />
            将字符串换换为字节数组
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Convert byte array to string <br />
            将字节数组换换位字符串
            </summary>
            <param name="bytes"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.EndsWith(System.String,System.String[])">
            <summary>
            Ends with <br />
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.EndsWith(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ends with <br />
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Ends with ignore case <br />
            确定此字符串实例的结尾是否与指定的字符串匹配，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.EndsWithIgnoreCase(System.String,System.String[])">
            <summary>
            Ends with any ignore case <br />
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.EndsWithIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ends with any ignore case <br />
            确定此字符串实例的结尾是否与指定的字符串数组中的某一个成员匹配，忽略大小写。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Index of ignore case <br />
            查找给定子字符串位于字符串的位置，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IndexOfIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            Index of ignore case <br />
            查找给定子字符串位于字符串的位置，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.LastIndexOfIgnoreCase(System.String,System.String)">
            <summary>
            Last index of ignore case <br />
            查找给定子字符串位于字符串的最后的位置，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.LastIndexOfIgnoreCase(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Last index of ignore case <br />
            查找给定子字符串位于字符串的最后的位置，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.LastIndexOfAny(System.String,System.String[])">
            <summary>
            Last index of any <br />
            查找给定子字符串集合中，最靠结尾的那个字字符串的位置
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IndexOfWholePhrase(System.String,System.String,System.Int32)">
            <summary>
            Index whole phrase <br />
            查找给定短语在字符串中的位置
            </summary>
            <param name="text"></param>
            <param name="toCheck"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.StartsWith(System.String,System.String[])">
            <summary>
            Start withs <br />
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.StartsWith(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Start withs <br />
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Starts with ignore case <br />
            确定此字符串实例的开头是否与指定的字符串匹配，忽略大小写。
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.StartsWithIgnoreCase(System.String,System.String[])">
            <summary>
            Starts with any ignore case <br />
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.StartsWithIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Starts with any ignore case <br />
            确定此字符串实例的开头是否与指定的字符串数组中的某一个成员匹配，忽略大小写。
            <para>只要有一个匹配，则返回 True，不然则返回 False</para>
            </summary>
            <param name="text"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.SubstringSince(System.String,System.String)">
            <summary>
            SubString from... <br />
            根据给定的子字符串在字符串中的位置开始截取
            </summary>
            <param name="text"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.SubstringTo(System.String,System.String)">
            <summary>
            SubString to... <br />
            根据给定的子字符串在字符串中的位置，截取至该位置
            </summary>
            <param name="text"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.TrimInner(System.String)">
            <summary>
            Remove all spaces. <br />
            移除所有空格。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.TrimAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trim all <br />
            对所有给定的字符串进行 Trim 操作
            </summary>
            <param name="texts"></param>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.TrimPhrase(System.String,System.String)">
            <summary>
            Trim phrase <br />
            根据给定的短语，对字符串两端进行 Trim 操作。
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.TrimPhraseStart(System.String,System.String)">
            <summary>
            Trim phrase start <br />
            根据给定的短语，对字符串开始端进行 Trim 操作。
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.TrimPhraseEnd(System.String,System.String)">
            <summary>
            Trim phrase end <br />
            根据给定的短语，对字符串结尾端进行 Trim 操作。
            </summary>
            <param name="text"></param>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Check whether the string is null or system.string.empty string <br />
            检查字符串是 null 还是 System.String.Empty 字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IsNotNullNorEmpty(System.String)">
            <summary>
            Check whether the string is null or system.string.empty string <br />
            检查字符串不是 null 或 System.String.Empty 字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check whether the string is null, empty, or just composed of white space characters <br />
            检查字符串是 null、空还是仅由空白字符组成
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StringsShortcutExtensions.IsNotNullNorWhiteSpace(System.String)">
            <summary>
            Check whether the string is null, empty, or just composed of white space characters <br />
            检查字符串不是 null、空或由空白字符串组成
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StringSimilarityTypes">
            <summary>
            Type Similarity <br />
            字符串相似度类型
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.Same">
            <summary>
            Same
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.MayorLong">
            <summary>
            Mayor long
            </summary>
        </member>
        <member name="F:Cosmos.Text.StringSimilarityTypes.MinorLong">
            <summary>
            Minor long
            </summary>
        </member>
        <member name="M:Cosmos.Text.StringWordHelper.AllCapitals(System.String)">
            <summary>
            To all capitals
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Text.StructuredStringVal">
            <summary>
            Structure String Value <br />
            结构化了的字符串值
            </summary>
        </member>
        <member name="P:Cosmos.Text.StructuredStringVal.Value">
            <summary>
            Gets value <br />
            获得值
            </summary>
        </member>
        <member name="P:Cosmos.Text.StructuredStringVal.Children">
            <summary>
            Get the next level of structured string value <br />
            获得下一级结构化字符串值
            </summary>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.Append(System.String)">
            <summary>
            Append string value <br />
            附加字符串值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.Append(Cosmos.Text.StructuredStringVal)">
            <summary>
            Append <see cref="T:Cosmos.Text.StructuredStringVal"/> value <br />
            附加结构化的字符串值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Cosmos.Text.StructuredStringVal.Count">
            <summary>
            Count <br />
            统计下一级结构化字符串值的数量
            </summary>
        </member>
        <member name="P:Cosmos.Text.StructuredStringVal.Length">
            <summary>
            Length <br />
            获得值的长度
            </summary>
        </member>
        <member name="P:Cosmos.Text.StructuredStringVal.Item(System.Int32)">
            <summary>
            Index <br />
            索引
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.GetChar(System.Int32)">
            <summary>
            Get char by index <br />
            根据给定的索引获得字符
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.ToCarArray">
            <summary>
            To char array.
            转换为字符数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.GetStringVal(System.Int32)">
            <summary>
            Get <see cref="T:Cosmos.Text.StructuredStringVal"/> by index <br />
            根据给定的索引获得结构化的字符串值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
            <footer><a href="https://docs.microsoft.com/en-us/dotnet/api/System.ValueType.ToString?view=netcore-5.0">`ValueType.ToString` on docs.microsoft.com</a></footer>
        </member>
        <member name="M:Cosmos.Text.StructuredStringVal.ToString(System.Boolean)">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <param name="includeChildren"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.TimeWatcher">
            <summary>
            Time watcher  <br />
            计时器
            </summary>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetTotalMilliseconds">
            <summary>
            Get total milliseconds  <br />
            获取总毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetElapsedMilliseconds">
            <summary>
            Get elapsed milliseconds <br />
            获取经过的毫秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetTotalSeconds">
            <summary>
            Get total seconds <br />
            获取总秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetTotalMinutes">
            <summary>
            Get total minutes <br />
            获取总分钟数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetTotalHours">
            <summary>
            Get total hours <br />
            获取总小时数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.GetTotalDays">
            <summary>
            Get total days <br />
            获取总天数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.TimeWatcher.Get">
            <summary>
            Get a new instance of <see cref="T:Cosmos.TimeWatcher"/> <br />
            获取一个新的 <see cref="T:Cosmos.TimeWatcher"/> 实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ValueOf`2">
            <summary>
            A value shortcut for object <br />
            通过继承该抽象类，获得一种直接获得对象的值的捷径
            </summary>
            <typeparam name="TVal"></typeparam>
            <typeparam name="TMe"></typeparam>
        </member>
        <member name="P:Cosmos.ValueOf`2.Value">
            <summary>
            Get value <br />
            获得值
            </summary>
        </member>
        <member name="M:Cosmos.ValueOf`2.Validate">
            <summary>
            Validate <br />
            验证
            </summary>
        </member>
        <member name="M:Cosmos.ValueOf`2.From(`0)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.ValueOf`2"/> <br />
            快速构建一个新的 <see cref="T:Cosmos.ValueOf`2"/> 实例
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ValueOf`2.From(`0,System.Action{`0})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.ValueOf`2"/> <br />
            快速构建一个新的 <see cref="T:Cosmos.ValueOf`2"/> 实例，并使用给定的验证器进行值验证
            </summary>
            <param name="value"></param>
            <param name="propertyValidator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ValueOf`2.Equals(Cosmos.ValueOf{`0,`1})">
            <summary>
            Equals <br />
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ValueOf`2.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Cosmos.ValueOf`2.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Cosmos.ValueOf`2.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cosmos.Verba.Boolean.DefaultBooleanVerba">
            <summary>
            Default global boolean verba <br />
            默认的全局布尔值 Verba 器
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.Instance">
            <summary>
            Get a default global boolean verba instance <br />
            获取一个默认的全局布尔值 Verba 器实例
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.VerbaName">
            <summary>
            Verba name <br />
            Verba 名称
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.TrueVerbaList">
            <summary>
            True alias list <br />
            True 的别名列表
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.DefaultBooleanVerba.FalseVerbaList">
            <summary>
            False alias list <br />
            False 的别名列表
            </summary>
        </member>
        <member name="T:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager">
            <summary>
            Global boolean verba manager <br />
            全局布尔值 Verba 管理器
            </summary>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.AddBooleanVerba(Cosmos.Verba.Boolean.IBooleanVerba)">
            <summary>
            Add boolean verba into <see cref="T:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager"/> <br />
            向 全局布尔值 Verba 管理器中添加一个新的布尔值
            </summary>
            <param name="verba"></param>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.Determining(System.String)">
            <summary>
            To determine the alas value is true, false or null. <br />
            根据给定的值判断为 True、False 还是空。
            </summary>
            <param name="verbaAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.Determining(System.String,System.Boolean)">
            <summary>
            To determine the alas value is true, false or default value you have given. <br />
            根据给定的值判断为 True、False 还是给定的默认值。
            </summary>
            <param name="verbaAlias"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.TryDetermining(System.String,System.Boolean@)">
            <summary>
            Try to determine the alas value is true, false or default value you have given. <br />
            尝试根据给定的值判断为 True、False 还是给定的默认值。
            </summary>
            <param name="verbaAlias"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Verba.Boolean.GlobalBooleanVerbaManager.MayBeDetermined(System.String)">
            <summary>
            Determine whether the given value can be inferred. <br />
            判断给定的值是否可被推断。
            </summary>
            <param name="verbaAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Verba.Boolean.IBooleanVerba">
            <summary>
            Interface for boolean verba <br />
            布尔值 Verba 接口
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.IBooleanVerba.TrueVerbaList">
            <summary>
            True alias list <br />
            True 别名列表
            </summary>
        </member>
        <member name="P:Cosmos.Verba.Boolean.IBooleanVerba.FalseVerbaList">
            <summary>
            False alias list <br />
            False 别名列表
            </summary>
        </member>
        <member name="T:System.ArgumentInvalidException">
            <summary>
            The exception that is thrown when a invalid parameter is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class.
            </summary>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">An object that describes the source or destination of the serialized data.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with the name of the parameter that causes this exception.</summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.ArgumentInvalidException"></see> class with a specified error message and the exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:System.ArgumentInvalidException.#ctor(System.String,System.String)">
            <summary>Initializes an instance of the <see cref="T:System.ArgumentInvalidException"></see> class with a specified error message and the name of the parameter that causes this exception.</summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:System.Runtime.IOSPlatformProvider">
            <summary>
            Interface of Operation System Platform information provider<br />
            用于获取 <see cref="T:System.Runtime.InteropServices.OSPlatform"/> 信息的提供者程序接口
            </summary>
        </member>
        <member name="M:System.Runtime.IOSPlatformProvider.GetCurrentOSPlatform">
            <summary>
            Get current operation system platform information<br />
            获取当前操作系统平台信息（<see cref="T:System.Runtime.InteropServices.OSPlatform"/>）
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.OSPlatformHelper">
            <summary>
            Operation system platform helper<br />
            操作系统平台信息帮助者程序
            </summary>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsMacOS">
            <summary>
            Is current operation system Apple MacOS (OSX)<br />
            当前操作系统是否是苹果 MacOS（OSX） 操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsOSX">
            <summary>
            Is current operation system Apple MacOS (OSX)<br />
            当前操作系统是否是苹果 MacOS（OSX） 操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsWindows">
            <summary>
            Is current operation system Microsoft Windows<br />
            当前操作系统是否为微软视窗（Windows）操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.OSPlatformHelper.IsLinux">
            <summary>
            Is current operation system Linux system<br />
            当前操作系统是否为 Linux 系统
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.OSPlatformProvider">
            <summary>
            Operation System Platform information provider<br />
            用于获取 <see cref="T:System.Runtime.InteropServices.OSPlatform"/> 信息的提供者程序
            </summary>
        </member>
        <member name="M:System.Runtime.OSPlatformProvider.GetCurrentOSPlatform">
            <summary>
            Get current operation system platform information<br />
            获取当前操作系统平台信息（<see cref="T:System.Runtime.InteropServices.OSPlatform"/>）
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
