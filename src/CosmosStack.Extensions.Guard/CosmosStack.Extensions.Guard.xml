<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CosmosStack.Extensions.Guard</name>
    </assembly>
    <members>
        <member name="T:CosmosStack.Collections.ArrayJudge">
            <summary>
            Array Judgement <br />
            数组检查器
            </summary>
        </member>
        <member name="M:CosmosStack.Collections.ArrayJudge.IsIndexInRange(System.Array,System.Int32)">
            <summary>
            In a one-dimensional array, determine whether the given index value will exceed the upper and lower bounds of the array.
            If it exceeds, it returns false. <br />
            在一维数组中，判断给定的索引值是否会超出数组上下界。如果超出则返回 false。
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.ArrayJudge.IsIndexInRange(System.Array,System.Int32,System.Int32)">
            <summary>
            In a multidimensional array, determine whether the given index value will exceed the upper and lower bounds on the specified dimension of the array.
            If it exceeds, it returns false.<br />
            If the dimension value exceeds the bounds, an exception is thrown. <br />
            在多维数组中，判断给定的索引值是否会超出数组指定维度上的上下界。如果超出则返回 false。 <br />
            如果维度值超界，则抛出异常。
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Collections.ArrayJudgeExtensions">
            <summary>
            Array Judgement Extensions<br />
            数组检查器扩展
            </summary>
        </member>
        <member name="T:CosmosStack.Collections.CollGuard">
            <summary>
            Collection Guard <br />
            集合守护
            </summary>
        </member>
        <member name="M:CosmosStack.Collections.CollGuard.ShouldBeNotNull(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Check if the collection is empty or null. <br />
            If the collection is empty or null, an exception is thrown. <br />
            检查集合是否为空。 <br />
            如果集合为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Collections.CollGuard.ShouldBeNotEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Check if the collection is empty. <br />
            If the collection is empty, an exception is thrown. <br />
            检查集合是否为空。 <br />
            如果集合为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Collections.CollGuard.ShouldContainAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String,System.String)">
            <summary>
            Check whether the set contains at least the specified number of elements. <br />
            If the set is less than the specified number of elements, an exception is thrown. <br />
            检查集合是否包含至少指定个数的元素。 <br />
            如果集合少于指定数目的元素，则抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="number"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Collections.CollGuard.ShouldBeNotNull``2(System.Collections.Generic.KeyValuePair{``0,``1},System.String,System.String)">
            <summary>
            Check if the key/value pair is empty or null. <br />
            If the key/value pair is empty or null, an exception is thrown. <br />
            检查键值对是否为空。 <br />
            如果键值对为空，则抛出异常。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.Collections.CollGuardExtensions">
            <summary>
            Collection Guard Extensions <br />
            集合守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Collections.CollGuardExtensions.Require(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Check if the collection is empty or null. <br />
            If the collection is empty or null, an exception is thrown. <br />
            检查集合是否为空。 <br />
            如果集合为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Collections.CollGuardExtensions.Require``2(System.Collections.Generic.KeyValuePair{``0,``1},System.String,System.String)">
            <summary>
            Check if the key/value pair is empty or null. <br />
            If the key/value pair is empty or null, an exception is thrown. <br />
            检查键值对是否为空。 <br />
            如果键值对为空，则抛出异常。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Collections.CollGuardExtensions.RequireAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String,System.String)">
            <summary>
            Check whether the set contains at least the specified number of elements. <br />
            If the set is less than the specified number of elements, an exception is thrown. <br />
            检查集合是否包含至少指定个数的元素。 <br />
            如果集合少于指定数目的元素，则抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="number"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.Collections.CollJudge">
            <summary>
            Collection Judgement <br />
            集合判断器
            </summary>
        </member>
        <member name="M:CosmosStack.Collections.CollJudge.IsNull(System.Collections.IEnumerable)">
            <summary>
            To judge whether the collection is null or not.<br />
            判断集合是否为空。
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.CollJudge.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determine whether the collection is empty or empty.<br />
            判断集合是否为空。
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.CollJudge.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determine whether the collection is empty or empty.<br />
            判断集合是否为空。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.CollJudge.IsSameCount``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Check if the number of elements in the set is the same. <br />
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.CollJudge.IsSameCount``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0})">
            <summary>
            Check if the number of elements in the set is the same. <br />
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Collections.CollJudgeExtensions">
            <summary>
            Collection Judgement Extensions <br />
            集合判断器扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Collections.CollJudgeExtensions.IsSameCount``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Check if the number of elements in the set is the same. <br />
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Collections.CollJudgeExtensions.IsSameCount``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0})">
            <summary>
            Check if the number of elements in the set is the same. <br />
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Date.DateGuard">
            <summary>
            Date Guard <br />
            日期守护
            </summary>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeValid(System.DateTime,System.String,System.String)">
            <summary>
            Check if the date is valid. <br />
            If the date is invalid, an exception is thrown. <br />
            检查日期是否有效。 <br />
            如果日期是无效的，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeValid(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Check if the date is valid. <br />
            If the date is invalid, an exception is thrown. <br />
            检查日期是否有效。 <br />
            如果日期是无效的，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeInThePast(System.DateTime,System.String,System.String)">
            <summary>
            Check if the date is in the past. <br />
            If the date is not in the past, an exception is thrown. <br />
            检查日期是否为过去的时间。 <br />
            如果日期不是过去的时间，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeInThePast(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Check if the date is in the past. <br />
            If the date is not in the past, an exception is thrown. <br />
            检查日期是否为过去的时间。 <br />
            如果日期不是过去的时间，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeInTheFuture(System.DateTime,System.String,System.String)">
            <summary>
            Check if the date is in the future. <br />
            If the date is not in the future, an exception is thrown. <br />
            检查日期是否为将来的时间。 <br />
            如果日期不是将来的时间，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.DateGuard.ShouldBeInTheFuture(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Check if the date is in the future. <br />
            If the date is not in the future, an exception is thrown. <br />
            检查日期是否为将来的时间。 <br />
            如果日期不是将来的时间，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:CosmosStack.Date.DateGuardExtensions">
            <summary>
            Date Guard Extensions <br />
            日期守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Date.DateGuardExtensions.CheckInvalidDate(System.DateTime,System.String,System.String)">
            <summary>
            Check if the date is valid. <br />
            If the date is invalid, an exception is thrown. <br />
            检查日期是否有效。 <br />
            如果日期是无效的，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.DateGuardExtensions.CheckInvalidDate(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Check if the date is valid. <br />
            If the date is invalid, an exception is thrown. <br />
            检查日期是否有效。 <br />
            如果日期是无效的，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.Date.TimeSpanGuard">
            <summary>
            TimeSpan Guard <br />
            TimeSpan 守护
            </summary>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBePositive(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is positive. <br />
            If the time span is negative or zero, an exception is thrown. <br />
            检查时间跨度是否为正的。 <br />
            如果时间跨度为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBePositive(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is positive. <br />
            If the time span is negative or zero, an exception is thrown. <br />
            检查时间跨度是否为正的。 <br />
            如果时间跨度为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBePositiveOrZero(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is positive or zero. <br />
            If the time span is negative, an exception is thrown. <br />
            检查时间跨度是否为正或为零。 <br />
            如果时间跨度为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBePositiveOrZero(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is positive or zero. <br />
            If the time span is negative, an exception is thrown. <br />
            检查时间跨度是否为正或为零。 <br />
            如果时间跨度为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBeNegative(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is negative. <br />
            If the time span is positive or zero, an exception is thrown. <br />
            检查时间跨度是否为负。 <br />
            如果时间跨度为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBeNegative(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is negative. <br />
            If the time span is positive or zero, an exception is thrown. <br />
            检查时间跨度是否为负。 <br />
            如果时间跨度为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBeNegativeOrZero(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is negative or zero. <br />
            If the time span is positive, an exception is thrown. <br />
            检查时间跨度是否为负或为零。 <br />
            如果时间跨度为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuard.ShouldBeNegativeOrZero(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is negative or zero. <br />
            If the time span is positive, an exception is thrown. <br />
            检查时间跨度是否为负或为零。 <br />
            如果时间跨度为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:CosmosStack.Date.TimeSpanGuardExtensions">
            <summary>
            TimeSpan Guard Extensions <br />
            TimeSpan 守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequirePositive(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is positive. <br />
            If the time span is negative or zero, an exception is thrown. <br />
            检查时间跨度是否为正的。 <br />
            如果时间跨度为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequirePositive(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is positive. <br />
            If the time span is negative or zero, an exception is thrown. <br />
            检查时间跨度是否为正的。 <br />
            如果时间跨度为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequirePositiveOrZero(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is positive or zero. <br />
            If the time span is negative, an exception is thrown. <br />
            检查时间跨度是否为正或为零。 <br />
            如果时间跨度为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequirePositiveOrZero(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is positive or zero. <br />
            If the time span is negative, an exception is thrown. <br />
            检查时间跨度是否为正或为零。 <br />
            如果时间跨度为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequireNegative(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is negative. <br />
            If the time span is positive or zero, an exception is thrown. <br />
            检查时间跨度是否为负。 <br />
            如果时间跨度为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequireNegative(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is negative. <br />
            If the time span is positive or zero, an exception is thrown. <br />
            检查时间跨度是否为负。 <br />
            如果时间跨度为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequireNegativeOrZero(System.TimeSpan,System.String,System.String)">
            <summary>
            Check whether the time span is negative or zero. <br />
            If the time span is positive, an exception is thrown. <br />
            检查时间跨度是否为负或为零。 <br />
            如果时间跨度为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Date.TimeSpanGuardExtensions.RequireNegativeOrZero(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            Check whether the time span is negative or zero. <br />
            If the time span is positive, an exception is thrown. <br />
            检查时间跨度是否为负或为零。 <br />
            如果时间跨度为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.IdUtils.GuidGuard">
            <summary>
            Guid Guard <br />
            GUID 守护
            </summary>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuard.ShouldBeValid(System.Guid,System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuard.ShouldBeValid(System.Nullable{System.Guid},System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.IdUtils.GuidGuardExtensions">
            <summary>
            Guid Guard Extensions <br />
            GUID 守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuardExtensions.CheckNull(System.Guid,System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuardExtensions.CheckNull(System.Nullable{System.Guid},System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuardExtensions.Require(System.Guid,System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidGuardExtensions.Require(System.Nullable{System.Guid},System.String,System.String)">
            <summary>
            Check if Guid is empty or null. <br />
            If it is empty or null, an exception is thrown. <br />
            检查 Guid 是否为空。 <br />
            如果为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.IdUtils.GuidJudge">
            <summary>
            Guid Judgement <br />
            GUID 检查器
            </summary>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidJudge.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            Determine whether the given nullable Guid is Null or Empty. <br />
            判断给定的可空 Guid 是否为 Null 或 Empty。
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidJudge.IsNullOrEmpty(System.Guid)">
            <summary>
            Determine whether the given Guid is Null or Empty. <br />
            判断给定的 Guid 是否为 Null 或 Empty。
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="T:CosmosStack.IdUtils.GuidJudgeExtensions">
            <summary>
            Guid Judgement Extensions <br />
            GUID 检验器扩展
            </summary>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidJudgeExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            Determine whether the given nullable Guid is Null or Empty. <br />
            判断给定的可空 Guid 是否为 Null 或 Empty。
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="M:CosmosStack.IdUtils.GuidJudgeExtensions.IsNullOrEmpty(System.Guid)">
            <summary>
            Determine whether the given Guid is Null or Empty. <br />
            判断给定的 Guid 是否为 Null 或 Empty。
            </summary>
            <param name="guid"> 值 </param>
        </member>
        <member name="T:CosmosStack.Numeric.NumericGuard">
            <summary>
            Numeric Guard <br />
            数值守护
            </summary>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Nullable{System.Int32},System.Int32,System.Int32,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Nullable{System.Int64},System.Int64,System.Int64,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Nullable{System.Single},System.Single,System.Single,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Nullable{System.Double},System.Double,System.Double,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositive(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBePositiveOrZero(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegative(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeNegativeOrZero(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Decimal,System.Decimal,System.Decimal,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuard.ShouldBeWithinRange(System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Nullable{System.Int32},System.Int32,System.Int32,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Int32,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Nullable{System.Int32},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Nullable{System.Int64},System.Int64,System.Int64,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Int64,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Nullable{System.Int64},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Nullable{System.Single},System.Single,System.Single,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Single,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Nullable{System.Single},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Nullable{System.Double},System.Double,System.Double,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Double,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Nullable{System.Double},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Decimal,System.Decimal,System.Decimal,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireWithinRange(System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查数值是否在范围内。
            如果数值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositiveOrZero(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive or zero. <br />
            If the number is negative, an exception is thrown. <br />
            检查数值是否为正或为零。 <br />
            如果数值为负，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequirePositive(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is positive. <br />
            If the number is negative or zero, an exception is thrown. <br />
            检查数值是否为正的。 <br />
            如果数值为负或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegativeOrZero(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative or zero. <br />
            If the number is positive, an exception is thrown. <br />
            检查数值是否为负或为零。 <br />
            如果数值为正，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Decimal,System.String,System.String)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Numeric.NumericGuardExtensions.RequireNegative(System.Nullable{System.Decimal},System.String,System.String,CosmosStack.Numeric.NumericMayOptions)">
            <summary>
            Check whether the number is negative. <br />
            If the number is positive or zero, an exception is thrown. <br />
            检查数值是否为负的。 <br />
            如果数值为正或为零，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="T:CosmosStack.Numeric.NumericJudge">
            <summary>
            Numeric Judgement <br />
            数值判断器
            </summary>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsInt16(System.String)">
            <summary>
            To judge whether the string is short or not. <br />
            判断字符串是否为 <see cref="T:System.Int16"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsInt32(System.String)">
            <summary>
            To judge whether the string is integer or not. <br />
            判断字符串是否为 <see cref="T:System.Int32"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsInt64(System.String)">
            <summary>
            To judge whether the string is long or not. <br />
            判断字符串是否为 <see cref="T:System.Int64"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsUInt16(System.String)">
            <summary>
            To judge whether the string is ushort or not. <br />
            判断字符串是否为 <see cref="T:System.UInt16"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsUInt32(System.String)">
            <summary>
            To judge whether the string is UInt32 or not. <br />
            判断字符串是否为 <see cref="T:System.UInt32"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsUInt64(System.String)">
            <summary>
            To judge whether the string is ulong or not. <br />
            判断字符串是否为 <see cref="T:System.UInt64"/>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsNumeric(System.String)">
            <summary>
            To judge whether the string is numeric or not. <br />
            判断字符串是否为数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Int16,System.Int16,System.Int16)">
            <summary>
            To judge whether the short value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            To judge whether the int value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            To judge whether the long value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            To judge whether the float value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            To judge whether the double value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            To judge whether the decimal value is between left and right. <br />
            判断给定的数值是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsNaN(System.Double)">
            <summary>
            Is NaN <br />
            判断是否为非数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Numeric.NumericJudge.IsNaN(System.Single)">
            <summary>
            Is NaN <br />
            判断是否为非数值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.ObjectGuard">
            <summary>
            Object Guard <br />
            对象守护
            </summary>
        </member>
        <member name="M:CosmosStack.ObjectGuard.NotNull(System.Object,System.String,System.String)">
            <summary>
            Check if the object is empty.
            If the object is empty, an exception is thrown.
            检查对象是否为空。
            如果对象为空，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.ObjectGuardExtensions.CheckNull(System.Object,System.String,System.String)">
            <summary>
            Check if the object is empty.
            If the object is empty, an exception is thrown.
            检查对象是否为空。
            如果对象为空，则抛出异常。
            </summary>
            <param name="argument">对象</param>
            <param name="argumentName">参数名</param>
            <param name="message">消息</param>
        </member>
        <member name="T:CosmosStack.Reflection.TypeJudge">
            <summary>
            Type Judgement <br />
            类型判断器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsEnumType(System.Type,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Is enum type <br />
            判断是否为枚举类型
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsEnumType``1(CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Is enum type <br />
            判断是否为枚举类型
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsEnumType``1(``0,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Is enum type <br />
            判断是否为枚举类型
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNumericType(System.Type,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="type"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNumericType``1(CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given type is a numeric type.<br />
            判断给定的类型是否为数字类型。
            </summary>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNumericType``1(``0,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a numeric type.<br />
            判断给定的对象是否为数字类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNullableType(System.Type)">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNullableType``1">
            <summary>
            Determine whether the given type is a nullable type. <br />
            判断给定的类型是否为可空类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsNullableType``1(``0)">
            <summary>
            Determine whether the given object is a nullable type. <br />
            判断给定的对象是否为可空类型。
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsCollectionType(System.Type)">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsCollectionType``1">
            <summary>
            Determine whether the given type is a collection or array type.<br />
            判断给定的类型是否为集合或数组类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsCollectionType``1(``0,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given object is a collection or array type.<br />
            判断给定的对象是否为集合或数组类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAnonymousType(System.Type)">
            <summary>
            Determine whether the given type is an anonymous type.<br />
            判断给定的类型是否为匿名类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAnonymousType``1">
            <summary>
            Determine whether the given type is an anonymous type.<br />
            判断给定的类型是否为匿名类型。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsObjectDerivedFrom``1(``0,System.Type,CosmosStack.Reflection.TypeIsOptions,CosmosStack.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the object is derived from a given type. <br />
            判断对象是否派生自给定的类型。
            </summary>
            <param name="value"></param>
            <param name="parentType"></param>
            <param name="isOptions"></param>
            <param name="derivedOptions"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsObjectDerivedFrom``2(``0,CosmosStack.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the object is derived from a given type. <br />
            判断对象是否派生自给定的类型。
            </summary>
            <param name="value"></param>
            <param name="isOptions"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsTypeDerivedFrom(System.Type,System.Type,CosmosStack.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the given type. <br />
            判断类型是否派生自给定的类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <param name="derivedOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsTypeDerivedFrom``2(CosmosStack.Reflection.TypeDerivedOptions)">
            <summary>
            Determine whether the type is derived from the given type. <br />
            判断类型是否派生自给定的类型。
            </summary>
            <param name="derivedOptions"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsTypeBasedOn(System.Type,System.Type)">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <param name="sourceType"></param>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsTypeBasedOn``2">
            <summary>
            Determine whether the given left type is derived from the right type. <br />
            判断给定的左侧类型是否派生自右侧类型。
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsImplementationOfGenericType(System.Type,System.Type,System.Type@,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericType"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsImplementationOfGenericType(System.Type,System.Type,System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="sourceType">The given type</param>
            <param name="parentGenericType">The generic type</param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsImplementationOfGenericType``2(System.Type[]@)">
            <summary>
            Determine whether the given type can be assigned to the specified generic type.<br />
            判断给定的类型是否可赋值给指定的泛型类型。
            </summary>
            <param name="genericArguments"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TGenericParent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsInterfaceDefined(System.Type,System.Type,CosmosStack.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsInterfaceDefined``1(System.Type,CosmosStack.Reflection.InterfaceOptions)">
            <summary>
            To determine whether the given Interface is defined.<br />
            判断给定的接口是否定义。
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsDescriptionDefined(System.Reflection.MemberInfo,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            Determine whether <see cref="T:System.ComponentModel.DescriptionAttribute"/> is defined. <br />
            判断 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 是否被定义。
            </summary>
            <param name="member"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsDescriptionDefined(System.Reflection.ParameterInfo,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            Determine whether <see cref="T:System.ComponentModel.DescriptionAttribute"/> is defined. <br />
            判断 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 是否被定义。
            </summary>
            <param name="parameter"></param>
            <param name="refOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined``1(System.Reflection.MemberInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined``1(System.Reflection.MemberInfo,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined``1(System.Reflection.ParameterInfo)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined``1(System.Reflection.ParameterInfo,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="options"></param>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined(System.Reflection.MemberInfo,System.Type,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.TypeJudge.IsAttributeDefined(System.Reflection.ParameterInfo,System.Type,CosmosStack.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="parameter"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.CharGuard">
            <summary>
            Char Guard <br />
            字符守护
            </summary>
        </member>
        <member name="M:CosmosStack.Text.CharGuard.ShouldBeWithinRange(System.Char,System.Char,System.Char,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查 Char 值是否在范围内。
            如果 Char 值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.CharGuard.ShouldBeWithinRange(System.Nullable{System.Char},System.Char,System.Char,System.String,System.String,CosmosStack.Text.CharMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查 Char 值是否在范围内。
            如果 Char 值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="T:CosmosStack.Text.CharGuardExtensions">
            <summary>
            Char Guard Extensions <br />
            字符守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.CharGuardExtensions.RequireWithinRange(System.Char,System.Char,System.Char,System.String,System.String)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查 Char 值是否在范围内。
            如果 Char 值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.CharGuardExtensions.RequireWithinRange(System.Nullable{System.Char},System.Char,System.Char,System.String,System.String,CosmosStack.Text.CharMayOptions)">
            <summary>
            Check whether the value is within the range.
            If the value is out of range, an exception is thrown.
            检查 Char 值是否在范围内。
            如果 Char 值超出范围，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
            <param name="options"></param>
        </member>
        <member name="T:CosmosStack.Text.CharJudge">
            <summary>
            Char Judgement <br />
            字符检查器
            </summary>
        </member>
        <member name="M:CosmosStack.Text.CharJudge.IsBetween(System.Char,System.Char,System.Char)">
            <summary>
            To judge whether the char value is between left and right. <br />
            判断给定的字符是否包含在左值和右值之间
            </summary>
            <param name="value"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.RegexJudge">
            <summary>
            Regex Judgement Utilities <br />
            正则检查器
            </summary>
        </member>
        <member name="M:CosmosStack.Text.RegexJudge.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor
            finds a match in a specified input string.<br />
            指示在Regex构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项。
            </summary>
            <param name="str"></param>
            <param name="pattern"></param>
            <param name="options">regex options, default is RegexOptions.IgnoreCase</param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.StringGuard">
            <summary>
            String Guard <br />
            字符串守护
            </summary>
        </member>
        <member name="M:CosmosStack.Text.StringGuard.NotNull(System.String,System.String,System.String)">
            <summary>
            Check if the string is null, empty or blank. <br />
            If the string is null, empty or blank, an exception is thrown. <br />
            检查字符串是否为空或空白。 <br />
            如果字符串为空或空白，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.StringGuard.NotEmpty(System.String,System.String,System.String)">
            <summary>
            Check if the string is empty or blank. <br />
            If the string is empty or blank, an exception is thrown. <br />
            检查字符串是否为空或空白。 <br />
            如果字符串为空或空白，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.StringGuard.NotBlank(System.String,System.String,System.String)">
            <summary>
            Check if the string is empty or blank. <br />
            If the string is empty or blank, an exception is thrown. <br />
            检查字符串是否为空或空白。 <br />
            如果字符串为空或空白，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.StringGuard.NotOutOfLength(System.String,System.Int32,System.String,System.String)">
            <summary>
            Check whether the string exceeds the specified length.
            If the string exceeds the specified length, an exception is thrown.
            检查字符串是否超过指定长度。
            如果字符串超过指定长度，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="length"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="T:CosmosStack.Text.StringGuardExtensions">
            <summary>
            String Guard Extensions <br />
            字符串守护扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.StringGuardExtensions.CheckNull(System.String,System.String,System.String)">
            <summary>
            Check if the string is null, empty or blank. <br />
            If the string is null, empty or blank, an exception is thrown. <br />
            检查字符串是否为空或空白。 <br />
            如果字符串为空或空白，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.StringGuardExtensions.CheckBlank(System.String,System.String,System.String)">
            <summary>
            Check if the string is empty or blank. <br />
            If the string is empty or blank, an exception is thrown. <br />
            检查字符串是否为空或空白。 <br />
            如果字符串为空或空白，则抛出异常。
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Text.StringGuardExtensions.RequireMaxLength(System.String,System.Int32,System.String,System.String)">
             <summary>
            Check whether the string exceeds the specified length.
            If the string exceeds the specified length, an exception is thrown.
            检查字符串是否超过指定长度。
            如果字符串超过指定长度，则抛出异常。
             </summary>
             <param name="argument"></param>
             <param name="length"></param>
             <param name="argumentName"></param>
             <param name="message"></param>
        </member>
        <member name="T:CosmosStack.Text.StringJudge">
            <summary>
            String Judgement <br />
            字符串检查器
            </summary>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.StartsWithThese(System.String,System.String[])">
            <summary>
            Determine whether the string starts with the specified string.<br />
            判断字符串是否以指定的字符串开头。
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.StartsWithThese(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Determine whether the string starts with the specified string.<br />
            判断字符串是否以指定的字符串开头。
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.EndsWithThese(System.String,System.String[])">
            <summary>
            Determine whether the string ends with the specified string.<br />
            判断字符串是否以指定的字符串结尾。
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.EndsWithThese(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Determine whether the string ends with the specified string.<br />
            判断字符串是否以指定的字符串结尾。
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.ContainsChineseCharacters(System.String)">
            <summary>
            Determine whether the string contains Chinese characters.<br />
            判断字符串是否包含汉字。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.ContainsNumber(System.String)">
            <summary>
            Determine whether the string contains numbers.<br />
            判断字符串是否包含数字。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.IsWebUrl(System.String)">
            <summary>
            Determine whether the string is a Web Url address.<br />
            判断字符串是否为 Web Url 地址。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudge.IsEmail(System.String)">
            <summary>
            Determine whether the string is an email.<br />
            判断字符串是否为电子邮件。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Text.StringJudgeExtensions">
            <summary>
            String Judgement Extensions <br />
            字符串检查器扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsChar(System.String)">
            <summary>
            Determine whether the given string is char. <br />
            判断给定的字符串是否是 char。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsBoolean(System.String)">
            <summary>
            Determine whether the given string is boolean. <br />
            判断给定的字符串是否是 boolean。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsEncoding(System.String)">
            <summary>
            Determine whether the given string is <see cref="T:System.Text.Encoding"/>. <br />
            判断给定的字符串是否是 <see cref="T:System.Text.Encoding"/>。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsVersion(System.String)">
            <summary>
            Determine whether the given string is a version number. <br />
            判断给定的字符串是否是版本号。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsIpAddress(System.String)">
            <summary>
            Determine whether the given string is an IP address. <br />
            判断给定的字符串是否是 IP 地址。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDateTime(System.String)">
            <summary>
            Determine whether the given string is DateTime. <br />
            判断给定的字符串是否为 DateTime。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDateTimeOffset(System.String)">
            <summary>
            Determine whether the given string is DateTimeOffset. <br />
            判断给定的字符串是否为 DateTimeOffset。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsTimeSpan(System.String)">
            <summary>
            Determine whether the given string is TimeSpan. <br />
            判断给定的字符串是否为 TimeSpan。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDateTimeExact(System.String,System.String)">
            <summary>
            Determine whether the given string is DateTime. <br />
            判断给定的字符串是否为 DateTime。
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDateTimeOffsetExact(System.String,System.String)">
            <summary>
            Determine whether the given string is DateTimeOffset. <br />
            判断给定的字符串是否为 DateTimeOffset。
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsTimeSpanExact(System.String,System.String)">
            <summary>
            Determine whether the given string is TimeSpan. <br />
            判断给定的字符串是否为 TimeSpan。
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsEnum(System.String,System.Type)">
            <summary>
            Determine whether the given string is an enumeration of the specified type.<br />
            判断给定的字符串是否为指定类型的枚举。
            </summary>
            <param name="str"></param>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsEnum``1(System.String)">
            <summary>
            Determine whether the given string is an enumeration of the specified type.<br />
            判断给定的字符串是否为指定类型的枚举。
            </summary>
            <param name="str"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsGuid(System.String)">
            <summary>
            Determine whether the given string is Guid. <br />
            判断给定的字符串是否为 Guid。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsGuidExact(System.String,System.String)">
            <summary>
            Determine whether the given string is Guid. <br />
            判断给定的字符串是否为 Guid。
            </summary>
            <param name="str"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsNumeric(System.String)">
            <summary>
            Determine whether the given string is a numeric value. <br />
            判断给定的字符串是否是数值。
            </summary>
            <param name="string"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsByte(System.String)">
            <summary>
            Determine whether the given string is byte. <br />
            判断给定的字符串是否是 byte。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsSByte(System.String)">
            <summary>
            Determine whether the given string is sbyte. <br />
            判断给定的字符串是否是 sbyte。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsShort(System.String)">
            <summary>
            Determine whether the given string is short. <br />
            判断给定的字符串是否是 short。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsInt(System.String)">
            <summary>
            Determine whether the given string is int. <br />
            判断给定的字符串是否是 int。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsLong(System.String)">
            <summary>
            Determine whether the given string is long. <br />
            判断给定的字符串是否是 long。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsUShort(System.String)">
            <summary>
            Determine whether the given string is ushort. <br />
            判断给定的字符串是否是 ushort。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsUInt(System.String)">
            <summary>
            Determine whether the given string is uint. <br />
            判断给定的字符串是否是 uint。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsULong(System.String)">
            <summary>
            Determine whether the given string is ulong. <br />
            判断给定的字符串是否是 ulong。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsInt16(System.String)">
            <summary>
            Determine whether the given string is int16(short). <br />
            判断给定的字符串是否是 int16(short)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsInt32(System.String)">
            <summary>
            Determine whether the given string is int32(int). <br />
            判断给定的字符串是否是 int32(int)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsInt64(System.String)">
            <summary>
            Determine whether the given string is int64(long). <br />
            判断给定的字符串是否是 int64(long)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsUInt16(System.String)">
            <summary>
            Determine whether the given string is uint16(ushort). <br />
            判断给定的字符串是否是 uint16(ushort)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsUInt32(System.String)">
            <summary>
            Determine whether the given string is uint32(uint). <br />
            判断给定的字符串是否是 uint32(uint)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.UsUInt64(System.String)">
            <summary>
            Determine whether the given string is uint64(ulong). <br />
            判断给定的字符串是否是 uint64(ulong)。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsFloat(System.String)">
            <summary>
            Determine whether the given string is float. <br />
            判断给定的字符串是否是 float。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDouble(System.String)">
            <summary>
            Determine whether the given string is double. <br />
            判断给定的字符串是否是 double。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsDecimal(System.String)">
            <summary>
            Determine whether the given string is decimal. <br />
            判断给定的字符串是否是 decimal。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsWebUrl(System.String)">
            <summary>
            Determine whether the given string is a URL path. <br />
            判断给定的字符串是否是 Url 路径。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Text.StringJudgeExtensions.IsEmail(System.String)">
            <summary>
            Determine whether the given string is an email address. <br />
            判断给定的字符串是否是电子邮件路径。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Validation.IHasValidationErrors">
            <summary>
            Interface, used to mark containing verification error messages <br />
            接口，用于标记包含验证错误信息
            </summary>
        </member>
        <member name="P:CosmosStack.Validation.IHasValidationErrors.ValidationMessage">
            <summary>
            Gets validation message <br />
            获取验证消息
            </summary>
        </member>
        <member name="T:CosmosStack.Validation.ValidationErrors">
            <summary>
            Validation Error Utilities <br />
            验证错误工具
            </summary>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Null(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Null(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Null(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Null(System.ArgumentNullException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.NullAndRaise">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.NullAndRaise(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.NullAndRaise(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.NullAndRaise(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.NullAndRaise(System.ArgumentNullException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentNullException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentNullException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="exception"></param>
            <exception cref="T:CosmosStack.Validation.ValidationException"></exception>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRange(System.String,System.Object,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <param name="actualValue"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRange(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRange(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRange(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRange(System.ArgumentOutOfRangeException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise(System.String,System.Object,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <param name="actualValue"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.OutOfRangeAndRaise(System.ArgumentOutOfRangeException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentOutOfRangeException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentOutOfRangeException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Invalid(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Invalid(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Invalid(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.Invalid(System.ArgumentInvalidException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/>. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.InvalidAndRaise">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.InvalidAndRaise(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.InvalidAndRaise(System.String,System.String)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.InvalidAndRaise(System.String,System.Exception)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Validation.ValidationErrors.InvalidAndRaise(System.ArgumentInvalidException)">
            <summary>
            Returns an instance of <see cref="T:System.ArgumentInvalidException"/> and raise. <br />
            返回一个包含 <see cref="T:System.ArgumentInvalidException"/> 实例的验证异常实例，并提升抛出
            </summary>
            <param name="exception"></param>
            <exception cref="T:CosmosStack.Validation.ValidationException"></exception>
        </member>
        <member name="T:CosmosStack.Validation.ValidationException">
            <summary>
            Validation exception <br />
            验证异常
            </summary>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="validationMessage"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="validationMessage"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
            <param name="validationMessage"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="message"></param>
            <param name="validationMessage"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(CosmosStack.Text.StructuredStringVal)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="messageVal"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(CosmosStack.Text.StructuredStringVal,System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="messageVal"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="validationMessage"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="validationMessage"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="validationMessage"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="validationMessage"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,CosmosStack.Text.StructuredStringVal)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="messageVal"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Int64,CosmosStack.Text.StructuredStringVal,System.String)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="errorCode"></param>
            <param name="messageVal"></param>
            <param name="flag"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="info"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.#ctor(CosmosStack.Exceptions.ExceptionOptions)">
            <summary>
            Create a new instance of <see cref="T:CosmosStack.Validation.ValidationException"/>.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Validation.ValidationException.ValidationMessage">
            <summary>
            Gets validation message
            </summary>
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.GetFullMessage">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Validation.ValidationException.ToString">
            <inheritdoc />
        </member>
        <member name="T:CosmosStack.Validation.ValidationExceptionExtensions">
            <summary>
            Validation exception extensions. <br />
            验证异常扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Validation.ValidationExceptionExtensions.ThrowAsValidationError(System.ArgumentNullException)">
            <summary>
            Throw as ValidationException. <br />
            作为 ValidationException 抛出
            </summary>
            <param name="exception"></param>
            <exception cref="T:CosmosStack.Validation.ValidationException"></exception>
        </member>
        <member name="M:CosmosStack.Validation.ValidationExceptionExtensions.ThrowAsValidationError(System.ArgumentOutOfRangeException)">
            <summary>
            Throw as ValidationException. <br />
            作为 ValidationException 抛出
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationExceptionExtensions.ThrowAsValidationError(System.ArgumentInvalidException)">
            <summary>
            Throw as ValidationException. <br />
            作为 ValidationException 抛出
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:CosmosStack.Validation.ValidationExceptionHelper.WrapAndRaise``1(System.Boolean,System.Object[])">
            <summary>
            Require.
            </summary>
            <param name="assertion"></param>
            <param name="exceptionParams"></param>
            <typeparam name="TException"></typeparam>
        </member>
    </members>
</doc>
