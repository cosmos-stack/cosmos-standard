<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Reflection</name>
    </assembly>
    <members>
        <member name="T:Cosmos.BooleanExceptionUtilitiesExtensions">
            <summary>
            Boolean extensions for Exception Builder
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants">
            <summary>
            Exception arg constants
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.MESSAGE">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.PARAM_NAME">
            <summary>
            Param Name
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.INNER_EXCEPTION">
            <summary>
            Inner exception
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.INNER">
            <summary>
            Inner exception, usage for InvalidProgramException
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.ACTUAL_VALUE">
            <summary>
            Actual value
            </summary>
        </member>
        <member name="F:Cosmos.Exceptions.BuildingServices.ExceptionArgConstants.ERROR_CODE">
            <summary>
            Error code
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions">
            <summary>
            Exception building options.<br />
            异常构建器选项。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions"/>.<br />
            构建一个新的 <see cref="T:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions"/> 实例。
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions.ExceptionType">
            <summary>
            Gets exception type.<br />
            获取异常类型。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions.AddArg``1(System.String,``0,System.Boolean)">
            <summary>
            Add args.<br />
            添加参数。
            </summary>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <param name="overrideVal"></param>
            <typeparam name="TArgVal"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions.AddArg``1(System.String,``0,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add args.<br />
            添加参数。
            </summary>
            <param name="argumentName"></param>
            <param name="argumentValue"></param>
            <param name="predicate"></param>
            <param name="overrideVal"></param>
            <typeparam name="TArgVal"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions.AddArg(Cosmos.Reflection.ArgumentDescriptor,System.Boolean)">
            <summary>
            Add args.<br />
            添加参数。
            </summary>
            <param name="descriptor"></param>
            <param name="overrideVal"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.ExceptionBuilder">
            <summary>
            Exception builder
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Create``1">
            <summary>
            Create a new builder for of <typeparamref name="TException"/> <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/>.<br />
            创建一个用于构建 <typeparamref name="TException"/> <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/> 的 builder。
            </summary>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Create(System.Type)">
            <summary>
            Create a new builder for the given type of exception for <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder"/>.<br />
            创建一个用于构建指定异常类型的 builder。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Raise``1(System.Boolean,System.String)">
            <summary>
            Create an exception and raise.
            </summary>
            <typeparam name="TException">Special type T.</typeparam>
            <param name="assertion">Predicate.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Raise``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Create an exception and raise.
            </summary>
            <typeparam name="TException">Special type T.</typeparam>
            <param name="assertion">Predicate.</param>
            <param name="message">Error message.</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Raise``1(System.Boolean,System.Object[])">
            <summary>
            Create an exception and raise.
            </summary>
            <typeparam name="TException">Special type TException.</typeparam>
            <param name="assertion">Predicate.</param>
            <param name="exceptionParams">Parameters for exception.</param>
        </member>
        <member name="M:Cosmos.Exceptions.ExceptionBuilder.Raise``1(System.Boolean,Cosmos.Exceptions.ExceptionOptions)">
            <summary>
            Create an exception and raise.
            </summary>
            <typeparam name="TException">Special type TException.</typeparam>
            <param name="assertion">Predicate.</param>
            <param name="options">Cosmos exception options.</param>
        </member>
        <member name="T:Cosmos.Exceptions.FluentExceptionBuilder">
            <summary>
            Exception builder<br />
            异常构建器。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.#ctor(System.Type,System.Action{System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal},Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/> 实例。
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.FluentExceptionBuilder.TargetType">
            <summary>
            Target type of exception.<br />
            目标异常的类型
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.InnerException(System.Exception)">
            <summary>
            Sets inner exception.<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.ParamName(System.String)">
            <summary>
            Sets parameter's name.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.Message(System.String)">
            <summary>
            Sets exception message.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.ActualValue(System.Object)">
            <summary>
            Sets actual value.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.ErrorCode(System.Int32)">
            <summary>
            Sets error code.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.Build(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.BuildAndThrow">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.BuildAndThrow(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.BuildAndThrowAsValidationError">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder.BuildAndThrowAsValidationError(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.FluentExceptionBuilder`1">
            <summary>
            Exception builder<br />
            异常构建器。
            </summary>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.#ctor(System.Action{System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal},Cosmos.Exceptions.BuildingServices.ExceptionBuildingOptions})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/>. <br />
            创建一个新的 <see cref="T:Cosmos.Exceptions.FluentExceptionBuilder`1"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.InnerException(System.Exception)">
            <summary>
            Sets inner exception.<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.ParamName(System.String)">
            <summary>
            Sets parameter's name.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.Message(System.String)">
            <summary>
            Sets exception message.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.ActualValue(System.Object)">
            <summary>
            Sets actual value.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.ErrorCode(System.Int32)">
            <summary>
            Sets error code.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.Build(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.BuildAndThrow">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.BuildAndThrow(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.BuildAndThrowAsValidationError">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.FluentExceptionBuilder`1.BuildAndThrowAsValidationError(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.IExceptionBuilder">
            <summary>
            Interface for fluent exception builder.<br />
            流畅异常构建器接口。
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.IExceptionBuilder.TargetType">
            <summary>
            Target type of exception.<br />
            目标异常的类型
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.BuildAndThrow">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.BuildAndThrowAsValidationError">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.Build(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.BuildAndThrow(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw exception.<br />
            构建，并抛出异常。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IExceptionBuilder.BuildAndThrowAsValidationError(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build, and throw as Validation error.<br />
            构建，并抛出验证错误。
            </summary>
        </member>
        <member name="T:Cosmos.Exceptions.IFluentExceptionBuilder`1">
            <summary>
            Interface for fluent exception builder.<br />
            流畅异常构建器接口。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.InnerException(System.Exception)">
            <summary>
            With inner exception.<br />
            This value will be used for constructor with param-name 'innerException' and 'inner' (just for <see cref="T:System.InvalidProgramException"/>).<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ParamName(System.String)">
            <summary>
            With parameter's name.<br />
            This value will be used for constructor with param-name 'paramName'.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Message(System.String)">
            <summary>
            With message.<br />
            This value will be used for constructor with param-name 'message'.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ActualValue(System.Object)">
            <summary>
            Actual value.<br />
            This value will be used for constructor with param-name 'actualValue'.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ErrorCode(System.Int32)">
            <summary>
            Error code.<br />
            This value will be used for constructor with param-name 'errorCode'.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Build">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Build(System.Collections.Generic.Dictionary{System.String,Cosmos.Reflection.IArgDescriptionVal})">
            <summary>
            Build.<br />
            构建。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Exceptions.IFluentExceptionBuilder">
            <summary>
            Interface for non-generic fluent exception builder.<br />
            流畅异常构建器接口。
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder.InnerException(System.Exception)">
            <summary>
            With inner exception.<br />
            This value will be used for constructor with param-name 'innerException' and 'inner' (just for <see cref="T:System.InvalidProgramException"/>).<br />
            设置内部异常。
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder.ParamName(System.String)">
            <summary>
            With parameter's name.<br />
            This value will be used for constructor with param-name 'paramName'.<br />
            设置参数名称。
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder.Message(System.String)">
            <summary>
            With message.<br />
            This value will be used for constructor with param-name 'message'.<br />
            设置异常消息。
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder.ActualValue(System.Object)">
            <summary>
            Actual value.<br />
            This value will be used for constructor with param-name 'actualValue'.<br />
            设置实际的值。
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder.ErrorCode(System.Int32)">
            <summary>
            Error code.<br />
            This value will be used for constructor with param-name 'errorCode'.<br />
            设置错误代码（Error Code）。
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Finders.BaseAttributeFinder`1">
            <summary>
            Attribute type finder
            </summary>
            <typeparam name="TAttributeType"></typeparam>
        </member>
        <member name="T:Cosmos.Finders.BaseTypeFinder`1">
            <summary>
            Base type finder
            </summary>
        </member>
        <member name="T:Cosmos.Finders.DirectoryAssemblyFinder">
            <summary>
            Directory assembly finder
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IAllAssemblyFinder">
            <summary>
            A finder for all Assembly
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IAssemblyFinder">
            <summary>
            A finder for Assembly
            </summary>
        </member>
        <member name="T:Cosmos.Finders.IMethodInfoFinder">
            <summary>
            A finder for MethodInfo
            </summary>
        </member>
        <member name="M:Cosmos.Finders.IMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="type">要查找的类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Finders.IMethodInfoFinder.FindAll(System.Type)">
            <summary>
            查找所有项
            </summary>
            <param name="type">要查找的类型</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Finders.ITypeFinder">
            <summary>
            A finder for Type
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.AssemblyVisit.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Get assembly file version.<br />
            获取 Assembly 文件的版本
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.AssemblyVisit.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            Get assembly product version.<br />
            获取 Assembly 文件的产品版本 
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.Reflection.InstanceScanner`1">
            <summary>
            Instance Scanner<br />
            实例扫描器
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="scannerName"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.#ctor(System.String,System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> instance.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.InstanceScanner`1"/> 实例。
            </summary>
            <param name="scannerName"></param>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.InstanceScanner`1.ScanAndReturnInstances">
            <summary>
            Scan, and return instances.<br />
            扫描，并返回实例集合。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.LockExtensions">
            <summary>
            Cosmos lock extensions
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndRun(System.Object,System.Action)">
            <summary>
            Lock the specified resource, and then execute the delegation.<br />
            对指定的资源进行加锁，然后执行委托。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndRun``1(``0,System.Action{``0})">
            <summary>
            Lock the specified resource, and then execute the delegation.<br />
            对指定的资源进行加锁，然后执行委托。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndReturn``1(System.Object,System.Func{``0})">
            <summary>
            Lock the specified resource, execute the commission and return the result.<br />
            对指定的资源进行加锁，执行委托并返回结果。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.LockExtensions.LockAndReturn``2(``0,System.Func{``0,``1})">
            <summary>
            Lock the specified resource, execute the commission and return the result.<br />
            对指定的资源进行加锁，执行委托并返回结果。
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.ObjectRefExtensions">
            <summary>
            Cosmos <see cref="T:System.Object"/> extensions.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.ObjectRefExtensions.GetHashCode``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Get hashcode
            </summary>
            <param name="x"></param>
            <param name="hashFieldValuesFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeScanner">
            <summary>
            Type Scanner <br />
            类型扫描器
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.ScannedResultCache">
            <summary>
            Scanned result cache<br />
            扫描结果缓存
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.ScannedResultCached">
            <summary>
            Scanned result cached<br />
            标记是否已缓存扫描结果
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="scannerName"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.#ctor(System.String,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.TypeScanner"/>.<br />
            创建一个新的 <see cref="T:Cosmos.Reflection.TypeScanner"/> 实例。
            </summary>
            <param name="scannerName"></param>
            <param name="baseType"></param>
        </member>
        <member name="P:Cosmos.Reflection.TypeScanner.BaseType">
            <summary>
            Base type <br />
            被扫描的基础类型
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.Scan">
            <summary>
            Scan.<br />
            执行扫描。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetAssemblies">
            <summary>
            Get assemblies.<br />
            获取程序集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetSkipAssembliesNamespaces">
            <summary>
            Get skip assemblies' namespaces.<br />
            获取需跳过的命名空间清单，清单所列的命名空间内的类型将不会被合并入结果（并缓存）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.GetLimitedAssembliesNamespaces">
            <summary>
            Get limited assemblies' namespaces.<br />
            获取指定命名空间下的类型，未被指定的命名空间内的类型将不会被合并入结果（并缓存）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.TypeFilter">
            <summary>
            Type filter.<br />
            类型过滤器 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.NeedToIgnore(System.Reflection.Assembly)">
            <summary>
            根据 <see cref="M:Cosmos.Reflection.TypeScanner.GetSkipAssembliesNamespaces"/> 和 <see cref="M:Cosmos.Reflection.TypeScanner.GetLimitedAssembliesNamespaces"/> 判别扫描所得的程序集是否符合用户期待。
            如何用户期待的程序集，其类型将进一步交由 <see cref="M:Cosmos.Reflection.TypeScanner.TypeFilter"/> 进行过滤。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeScanner.Dispose">
            <summary>
            Dispose<br />
            释放。
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeVisit">
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
            <summary>
            Type visit, an advanced TypeReflections utility.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Get full name of method including type name and method name.<br />
            获取方法的全名，包括类型名和方法名
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetFullyQualifiedName(System.Reflection.MethodInfo)">
            <summary>
            Get unique fully qualified name for <see cref="T:System.Reflection.MethodInfo"/>.<br />
            获取给定 <see cref="T:System.Reflection.MethodInfo"/> 的完全限定名。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetMethodBySignature(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Get method by signature
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetBaseMethod(System.Reflection.MethodInfo)">
            <summary>
            Get BaseMethod
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.IsVisibleAndVirtual(System.Reflection.MethodInfo)">
            <summary>
            Determine whether MethodInfo is Visible and Virtual.
            </summary>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.IsVisible(System.Reflection.MethodBase)">
            <summary>
            Determine whether MethodBase is Visible.
            </summary>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetProperties(System.Type,Cosmos.Reflection.PropertyAccessOptions)">
            <summary>
            Get all properties from the given Type.<br />
            从给定的 Type 中获得所有属性。
            </summary>
            <param name="type"></param>
            <param name="accessOptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetProperties``1(Cosmos.Reflection.PropertyAccessOptions)">
            <summary>
            Get all properties from the given Type.<br />
            从给定的 Type 中获得所有属性。
            </summary>
            <param name="accessOptions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.IsVisibleAndVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether PropertyInfo is Visible and Virtual.
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetFullName(System.Type)">
            <summary>
            Get unique fully name for <see cref="T:System.Reflection.TypeInfo"/>.<br />
            获取给定 <see cref="T:System.Reflection.MethodInfo"/> 的名称。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetFullyQualifiedName(System.Type)">
            <summary>
            Get unique fully qualified name for <see cref="T:System.Reflection.TypeInfo"/>.<br />
            获取给定 <see cref="T:System.Reflection.TypeInfo"/> 的完全限定名。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.HasEmptyConstructor(System.Type)">
            <summary>
            Determine whether there is a parameterless constructor.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetEmptyConstructor(System.Type)">
            <summary>
            Get default constructor without any parameters.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisit.GetMatchingConstructor(System.Type,System.Type[])">
            <summary>
            Finds a constructor with the matching type parameters.
            </summary>
            <param name="type">The type being tested.</param>
            <param name="constructorParameterTypes">The types of the contractor to find.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> is a match is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Cosmos.Reflection.TypeMetaVisitExtensions">
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
            <summary>
            Type metadata visit, a meta information access entry for TypeReflections and TypeVisit.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAttributeDefined``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="member">要检查的类型成员</param>
            <param name="options">反射选项</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAttributeNotDefined``1(System.Reflection.MemberInfo,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is undefined.<br />
            判断给定的特性是否未定义。
            </summary>
            <typeparam name="TAttribute">要检查的特性类型</typeparam>
            <param name="member">要检查的类型成员</param>
            <param name="options">反射选项</param>
            <returns>是否不存在</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAttributeDefined(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is defined.<br />
            判断给定的特性是否定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAttributeNotDefined(System.Reflection.MemberInfo,System.Type,Cosmos.Reflection.ReflectionOptions)">
            <summary>
            To determine whether the given Attribute is undefined.<br />
            判断给定的特性是否未定义。
            </summary>
            <param name="member"></param>
            <param name="attributeType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsNumeric(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given member is a numeric type.<br />
            判断给定的成员是否为数字类型。
            </summary>
            <param name="member">要检查的类型</param>
            <param name="options"></param>
            <returns>是否是数值类型</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsNumeric(System.Reflection.ParameterInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given parameter is a numeric type.<br />
            判断给定的参数是否为数字类型。
            </summary>
            <param name="parameter"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsTupleType(System.Reflection.MemberInfo,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given member is a tuple type.<br />
            判断给定的成员是否为元组类型
            </summary>
            <param name="member"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsTupleType(System.Reflection.ParameterInfo,Cosmos.Reflection.TypeOfOptions,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given parameter is a tuple type.<br />
            判断给定的参数是否为数元组类型
            </summary>
            <param name="parameter"></param>
            <param name="ofOptions"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsStructType(System.Reflection.MemberInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given member is a struct type.<br />
            判断给定的成员是否为结构类型
            </summary>
            <param name="member"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsStructType(System.Reflection.ParameterInfo,Cosmos.Reflection.TypeIsOptions)">
            <summary>
            Determine whether the given parameter is a struct type.<br />
            判断给定的参数是否为数结构类型
            </summary>
            <param name="parameter"></param>
            <param name="isOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Determine whether the specified method is an asynchronous method.<br />
            判断指定的方法是否为异步方法。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            Determine whether the specified method is an overriding method.<br />
            判断指定方法是否是重写方法
            </summary>
            <param name="method">要判断的方法信息</param>
            <returns>是否是重写方法</returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Get full name of method including type name and method name.<br />
            获取方法的全名，包括类型名和方法名
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetFullyQualifiedName(System.Reflection.MethodInfo)">
            <summary>
            Get unique fully qualified name for <see cref="T:System.Reflection.MethodInfo"/>.<br />
            获取给定 <see cref="T:System.Reflection.MethodInfo"/> 的完全限定名。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetMethodBySignature(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Get method by signature
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetBaseMethod(System.Reflection.MethodInfo)">
            <summary>
            Get BaseMethod
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsVisibleAndVirtual(System.Reflection.MethodInfo)">
            <summary>
            Determine whether MethodInfo is Visible and Virtual.
            </summary>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsVisible(System.Reflection.MethodBase)">
            <summary>
            Determine whether MethodBase is Visible.
            </summary>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether the specified property is a virtual property.<br />
            判断指定属性是否是虚属性。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsAbstract(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether the specified property is an abstract property.<br />
            判断指定属性是否是虚属性。
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.IsVisibleAndVirtual(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether PropertyInfo is Visible and Virtual.
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.HasEmptyConstructor(System.Type)">
            <summary>
            Determine whether there is a parameterless constructor.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetEmptyConstructor(System.Type)">
            <summary>
            Get default constructor without any parameters.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeMetaVisitExtensions.GetMatchingConstructor(System.Type,System.Type[])">
            <summary>
            Finds a constructor with the matching type parameters.
            </summary>
            <param name="type">The type being tested.</param>
            <param name="constructorParameterTypes">The types of the contractor to find.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> is a match is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptionVal`1.Name">
            <summary>
            Argument name
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptionVal`1.Value">
            <summary>
            Argument value
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptionVal`1.Type">
            <summary>
            Argument type
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.ArgumentDescriptor">
            <summary>
            Descriptor of argument
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.ArgumentDescriptor.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Reflection.ArgumentDescriptor"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptor.Name">
            <summary>
            Argument name
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptor.Value">
            <summary>
            Argument value
            </summary>
        </member>
        <member name="P:Cosmos.Reflection.ArgumentDescriptor.Type">
            <summary>
            Argument type
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.TypeVisitExtensions">
            <summary>
            Type visit extensions
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <typeparam name="TInstance"></typeparam>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance``1(System.Type,System.Collections.Generic.IEnumerable{Cosmos.Reflection.ArgumentDescriptor})">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <param name="type"></param>
            <param name="arguments"></param>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance``1(System.Type,Cosmos.Reflection.ArgumentDescriptor,Cosmos.Reflection.ArgumentDescriptor[])">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <param name="type"></param>
            <param name="argument"></param>
            <param name="arguments"></param>
            <typeparam name="TInstance"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance(System.Type,System.Collections.Generic.IEnumerable{Cosmos.Reflection.ArgumentDescriptor})">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <param name="type"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.CreateInstance(System.Type,Cosmos.Reflection.ArgumentDescriptor,Cosmos.Reflection.ArgumentDescriptor[])">
            <summary>
            Create an instance of the specified type.<br />
            创建指定类型的实例。
            </summary>
            <param name="type"></param>
            <param name="argument"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Reflection.TypeVisitExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude all PropertyInfos that meet the given conditions from the PropertyInfo list,
            and return the remaining PropertyInfo.<br />
            从 PropertyInfo 列表中排除所有满足给定条件的 PropertyInfo，并返回其余 PropertyInfo。
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Reflection.ExpressionCopier`1.Copy(`0)">
            <summary>
            Deep copy by expression
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Reflection.DeepCopyContext">
            <summary>
            Records details about copied objects.
            </summary>
        </member>
        <member name="M:Cosmos.Reflection.DeepCopyContext.RecordCopy(System.Object,System.Object)">
            <summary>
            Records <paramref name="copy"/> as a copy of <paramref name="original"/>.
            </summary>
            <param name="original">The original object.</param>
            <param name="copy">The copy of <paramref name="original"/>.</param>
        </member>
        <member name="M:Cosmos.Reflection.DeepCopyContext.TryGetCopy(System.Object,System.Object@)">
            <summary>
            Returns the copy of <paramref name="original"/> if it has been copied or <see langword="null"/> if it has not yet been copied.
            </summary>
            <param name="original">The original object.</param>
            <param name="result">The copied object.</param>
            <returns>The copy of <paramref name="original"/> or <see langword="null"/> if no copy has been made.</returns>
        </member>
        <member name="M:Cosmos.Reflection.DeepCopyContext.Reset">
            <summary>
            Resets this instance so that it can be reused.
            </summary>
        </member>
        <member name="T:Cosmos.Reflection.PropertyAccessOptions">
            <summary>
            Property access options
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.PropertyAccessOptions.Getters">
            <summary>
            Getters
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.PropertyAccessOptions.Setters">
            <summary>
            Setters
            </summary>
        </member>
        <member name="F:Cosmos.Reflection.PropertyAccessOptions.Both">
            <summary>
            Both
            </summary>
        </member>
        <member name="T:System.Reflection.Emit.SystemModuleBuilderExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.Emit.ModuleBuilder"/> extensions.
            </summary>
        </member>
        <member name="M:System.Reflection.Emit.SystemModuleBuilderExtensions.DefinePOCO(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Define POCO
            </summary>
            <param name="builder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.Emit.SystemModuleBuilderExtensions.DefinePOCO(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            Define POCO
            </summary>
            <param name="builder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:System.Reflection.Emit.SystemTypeBuilderExtensions">
            <summary>
            Cosmos <see cref="T:System.Reflection.Emit.TypeBuilder"/> extensions.
            </summary>
        </member>
        <member name="F:System.Reflection.Emit.SystemTypeBuilderExtensions.PROPERTY_GET_SET_METHOD_ATTRIBUTES">
            <summary>
            Property set and property get methods require a special set of attributes.
            </summary>
        </member>
        <member name="M:System.Reflection.Emit.SystemTypeBuilderExtensions.DefineAutoImplementedProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Define auto implemented property
            </summary>
            <param name="typeBuilder"></param>
            <param name="name"></param>
            <param name="propertyType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
    </members>
</doc>
